/*
 * Copyright (c) 2022-2025 See AUTHORS file.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.github.tommyettinger.ds.test;

import com.github.tommyettinger.digital.Base;
import com.github.tommyettinger.digital.BitConversion;
import com.github.tommyettinger.ds.IntIntOrderedMap;
import com.github.tommyettinger.ds.support.sort.IntComparators;

import java.io.IOException;

import static com.github.tommyettinger.ds.test.PileupTest.LEN;
import static com.github.tommyettinger.ds.test.PileupTest.generateVectorSpiral;

/**
 * 70907 problem multipliers in total, 52617 likely good multipliers in total.
 * Lowest collisions : 603111
 * Highest collisions: 677821
 * Lowest pileup     : 15
 * Highest pileup    : 25
 */
public class AllSmallProductIntVectorHashTest {

	public static final int[] GOOD_MULTIPLIERS = new int[]{
		0x00197D75, 0x001F6AE3, 0x0006F5F3, 0x001C4C3D, 0x001AD501, 0x000D36F9, 0x0012D2B7, 0x001A0E77,
		0x000AB569, 0x00114C3D, 0x0016CC3D, 0x000348A3, 0x0002F571, 0x0009C255, 0x000DF571, 0x000DFD75,
		0x000B1E47, 0x001254FF, 0x000F52B7, 0x00150E77, 0x000C5205, 0x000B7D75, 0x0017D5EB, 0x0015EAE3,
		0x001A4987, 0x00012207, 0x0002E173, 0x001FA119, 0x001A7B2F, 0x00116CE9, 0x000214D9, 0x000B85C7,
		0x000CC255, 0x00102DC3, 0x00020427, 0x0001A649, 0x000D7B2F, 0x0010D2B7, 0x000694D9, 0x001865D5,
		0x00073B83, 0x0004D4FF, 0x0018EAE3, 0x0013F5F3, 0x0016E5D5, 0x000765D5, 0x0003B6F9, 0x000AD4FF,
		0x000B8E77, 0x0000D339, 0x0005ADC3, 0x00114C17, 0x001FE173, 0x0011ADC3, 0x000BC057, 0x001A52B7,
		0x00130427, 0x00165205, 0x001FBCA7, 0x000EFB2F, 0x000BD4FF, 0x000B55EB, 0x0001B569, 0x001CA649,
		0x00163713, 0x000DB569, 0x00018427, 0x00075501, 0x000C3B83, 0x000B4987, 0x001265D5, 0x000914D9,
		0x001854FF, 0x0007C8D7, 0x0014D5EB, 0x00087571, 0x0002AA37, 0x001714D9, 0x00016173, 0x0008D2B7,
		0x0012BB83, 0x001F7BB3, 0x0003A119, 0x0002C8D7, 0x0008C057, 0x0001E8E7, 0x00065205, 0x00024057,
		0x001C14D9, 0x0010C8A3, 0x0006F6F7, 0x001E0E77, 0x00182649, 0x00013713, 0x0001F5F3, 0x0016CC17,
		0x000BB569, 0x001ACC17, 0x0011FBB3, 0x0000F6F7, 0x0016FD75, 0x001BAA37, 0x0015B713, 0x000F2207,
		0x0012A649, 0x000F5501, 0x00050415, 0x0009D501, 0x0001CC17, 0x001AA649, 0x0002C8A3, 0x001D1E47,
		0x0010ECE9, 0x001548A3, 0x000D7D75, 0x000DADC3, 0x00014C3D, 0x0012C987, 0x0008C4BF, 0x00084057,
		0x000750DB, 0x0019D0DB, 0x001B7571, 0x001D2DC3, 0x00153569, 0x001365D5, 0x000C1E47, 0x0006B569,
		0x000DEA89, 0x0015D205, 0x000CD501, 0x0000C2E5, 0x00105339, 0x001D42E5, 0x001FC057, 0x000568E7,
		0x000F2649, 0x000B0415, 0x0018CC17, 0x000D48A3, 0x000052B7, 0x000DD501, 0x0009D0DB, 0x00060415,
		0x00043B83, 0x001848D7, 0x0007F6F7, 0x0014C987, 0x0016CD59, 0x0005BCA7, 0x00138427, 0x00024987,
		0x001A8427, 0x001C42E5, 0x000B0427, 0x00035339, 0x000A6173, 0x001BCC3D, 0x000D4EC9, 0x000E94D9,
		0x001A4C3D, 0x001D65D5, 0x0018E8E7, 0x001D5205, 0x000FEAE3, 0x00098427, 0x000FD5EB, 0x0000E173,
		0x0017E5D5, 0x000D2119, 0x0019A207, 0x001955EB, 0x001F2207, 0x00010427, 0x001DFD75, 0x00104D59,
		0x0012B713, 0x001FE8E7, 0x001EF6F7, 0x00104C17, 0x0019C057, 0x00168415, 0x001A48D7, 0x0011A649,
		0x001BA207, 0x000DAA37, 0x001355EB, 0x000DC057, 0x000952B7, 0x0015AA37, 0x001F9497, 0x001C52B7,
		0x001F85C7, 0x0003C8A3, 0x000CE5D5, 0x000FB713, 0x00037B2F, 0x0000EA89, 0x001BD0DB, 0x000CC057,
		0x000AF571, 0x00112DC3, 0x0014C4BF, 0x00062A37, 0x001DC8A3, 0x0001D205, 0x000B48A3, 0x00084987,
		0x001DE173, 0x001950DB, 0x0012F571, 0x00076AE3, 0x0005D5EB, 0x00093B83, 0x00064C3D, 0x0019B6F9,
		0x000FD2B7, 0x00135501, 0x001442E5, 0x000CD205, 0x000EA649, 0x000F8427, 0x000014D9, 0x001155EB,
		0x000B9497, 0x00094EC9, 0x001594D9, 0x00027D75, 0x001EE5D5, 0x00042119, 0x0001AA37, 0x000A4987,
		0x000F5205, 0x001C5501, 0x000C9497, 0x001BC2E5, 0x000C55EB, 0x000FD4FF, 0x000B6AE3, 0x0013B6F9,
		0x000848A3, 0x00022207, 0x00084C17, 0x0000CC3D, 0x001D52B7, 0x00114D59, 0x001ACEC9, 0x00047B2F,
		0x000A2119, 0x00051E47, 0x000C48D7, 0x0013FD75, 0x001055EB, 0x001CD205, 0x00127BB3, 0x0016B569,
		0x0012BCA7, 0x0015ADC3, 0x001A8415, 0x0008FBB3, 0x0009ECE9, 0x000A42E5, 0x001F3713, 0x00130E77,
		0x00005339, 0x0001ADC3, 0x00150427, 0x0019EA89, 0x0003A649, 0x001E1497, 0x000BCC17, 0x000CD0DB,
		0x000B4255, 0x0019FB2F, 0x001DD2B7, 0x000AD0DB, 0x000EAA37, 0x00146173, 0x00172119, 0x001DA207,
		0x00086173, 0x0003D501, 0x001B85C7, 0x000E85C7, 0x00044057, 0x0014E8E7, 0x000FFB2F, 0x000AC987,
		0x001A2119, 0x00021497, 0x00044255, 0x00078427, 0x000C52B7, 0x00074EC9, 0x00164987, 0x0004ECE9,
		0x001D2207, 0x0012CC3D, 0x00192207, 0x0006CC3D, 0x00103713, 0x00134C3D, 0x000E3569, 0x0014C057,
		0x0011E173, 0x00182A37, 0x0019C987, 0x00197B2F, 0x00195501, 0x001DC987, 0x000AF5F3, 0x0010FBB3,
		0x001905C7, 0x00077571, 0x000FF6F7, 0x000314D9, 0x0005E8E7, 0x00145501, 0x0017CEC9, 0x0017D205,
		0x000F85C7, 0x001F4EC9, 0x001876F7, 0x001DCEC9, 0x0007C987, 0x000942E5, 0x000BF571, 0x000442E5,
		0x000E50DB, 0x001344BF, 0x00108E77, 0x001AB713, 0x00034987, 0x00180427, 0x000585C7, 0x0002B6F9,
		0x0008F571, 0x00024EC9, 0x001FCDD1, 0x00014DD1, 0x001FC7FB, 0x001B136F, 0x0009C7FB, 0x00110B4F,
		0x0016D71B, 0x0009CDD1, 0x0010CDD1, 0x000F0B4F, 0x0012C7FB, 0x00188B4F, 0x000547FB, 0x001AC7FB,
		0x000647FB, 0x0018936F, 0x0008CDD1, 0x0014936F, 0x0019136F, 0x0007936F, 0x001DC7FB, 0x0014571B,
		0x000E936F, 0x0004936F, 0x001B0B4F, 0x001DD71B, 0x0011CDD1, 0x0015C7FB, 0x000C4DD1, 0x0004571B,
		0x0013571B, 0x000E4DD1, 0x00148B4F, 0x001D136F, 0x000C8B4F, 0x0001571B, 0x001E136F, 0x001C571B,
		0x000747FB, 0x000CC7FB, 0x0014548F, 0x001A2AA9, 0x00118A27, 0x00101A2D, 0x000514C9, 0x001EF7C7,
		0x00164ED1, 0x001A0EB9, 0x001E0CAF, 0x001FC43F, 0x000C00F5, 0x000F77C7, 0x000CD0CD, 0x000A14D1,
		0x0012EAF1, 0x0006CAB9, 0x000C98E1, 0x00011663, 0x0005CBF3, 0x001AB53D, 0x00137C2F, 0x001438A1,
		0x000F5DB3, 0x001CE795, 0x001A741B, 0x001AE9E7, 0x001040CF, 0x001D7E5D, 0x00081CB1, 0x000B6F35,
		0x0004A781, 0x000EBF25, 0x00195695, 0x001BCB61, 0x001DF667, 0x00098BD7, 0x0010AC31, 0x001EF46B,
		0x001DF7C7, 0x0000E53B, 0x001D0A5D, 0x0010F71F, 0x000F0475, 0x001F10DF, 0x00139CEB, 0x00102733,
		0x0017D14F, 0x0001409D, 0x0007D7F3, 0x0011357D, 0x001BF855, 0x000937AD, 0x001470FD, 0x000B3DE1,
		0x001C9C89, 0x0007A781, 0x0018E671, 0x00022A4F, 0x0008548F, 0x000D38A1, 0x000E00C9, 0x00028D31,
		0x001D66FF, 0x00039F61, 0x000BFDE7, 0x0010F17B, 0x00023DE1, 0x00164B83, 0x000EDD93, 0x00138D13,
		0x0012765B, 0x0019D823, 0x0007AB3F, 0x0019C7D7, 0x0008773B, 0x0012CC4F, 0x0006E53B, 0x00031FAD,
		0x0009443F, 0x0015E81D, 0x000439B5, 0x000B35F7, 0x00179D2F, 0x0019A733, 0x00014BA7, 0x0018FC4F,
		0x001D40FB, 0x0000286B, 0x001D653D, 0x00157861, 0x00138B11, 0x0012BD63, 0x0016AC31, 0x001F6795,
		0x00022BC5, 0x00166795, 0x0012548F, 0x000AF8A9, 0x0015B873, 0x0017746B, 0x000A2AA9, 0x00088A73,
		0x0014AC31, 0x00031F61, 0x0010653B, 0x000E5D93, 0x001514D1, 0x001A66F1, 0x001A3D49, 0x000B186F,
		0x0017BB2B, 0x0014A2DD, 0x00152C2F, 0x000A66FF, 0x0007C54B, 0x001CBF25, 0x000C0A5D, 0x001EBA91,
		0x000A98C5, 0x0015DD93, 0x001E5D43, 0x000F10DF, 0x00052807, 0x000B70FD, 0x00018615, 0x0005F855,
		0x000A02C5, 0x000DBA8D, 0x0001F029, 0x00078A73, 0x0019B7AD, 0x001347D7, 0x001F44F1, 0x001970D5,
		0x00040BD7, 0x001D277D, 0x0003147F, 0x0018D75F, 0x0012D93D, 0x000898E1, 0x001861B5, 0x001EDBE9,
		0x000C0711, 0x0015CED1, 0x0008A005, 0x0003765B, 0x001E4BF3, 0x00004B61, 0x0016A005, 0x0004AC31,
		0x00197E5D, 0x0015C2EF, 0x0003147B, 0x001EF855, 0x000AE073, 0x001E7949, 0x000C66FF, 0x000294D1,
		0x0018F17B, 0x0012CB83, 0x001F66FF, 0x000E7E5D, 0x000B9909, 0x00009455, 0x001E773B, 0x00093691,
		0x000EE2D3, 0x0007BDE1, 0x0017D40F, 0x00199407, 0x0003E9E7, 0x0008A2DD, 0x0018D2E5, 0x001E14D1,
		0x00132633, 0x000C4455, 0x00010129, 0x000052E5, 0x00124B83, 0x000ADD93, 0x001AC641, 0x0004EC45,
		0x0019454B, 0x0019453F, 0x00002005, 0x000361B5, 0x00177E5D, 0x0019ED47, 0x000F0657, 0x000C101B,
		0x000A7855, 0x0018BDE1, 0x0019C7BD, 0x0010D14F, 0x00097667, 0x00161ABB, 0x000142EF, 0x0016D40F,
		0x00086691, 0x001E409D, 0x000879F7, 0x000B7C2F, 0x00075D93, 0x000FBA63, 0x000347BD, 0x00045DB3,
		0x0015B5F7, 0x0000B691, 0x0002C3BF, 0x001EB57D, 0x001D9ABB, 0x000244F1, 0x001147D7, 0x0007FDE7,
		0x001898C5, 0x000BBA63, 0x000C6795, 0x001DE1B5, 0x001B979F, 0x0018C3AD, 0x0007F8AD, 0x000DA2DD,
		0x0009B873, 0x0019433D, 0x000547D7, 0x001ED4D5, 0x00110EB9, 0x0002B8A1, 0x0015E6F1, 0x00079455,
		0x0000357D, 0x000FAC31, 0x00123FE1, 0x001898E1, 0x000FA719, 0x0010BD63, 0x001B61B5, 0x000BA781,
		0x000F917B, 0x00041471, 0x00084B83, 0x00168657, 0x0015231F, 0x001DB691, 0x00197667, 0x00123943,
		0x0010B671, 0x000BEC85, 0x001DFE5D, 0x001F70D5, 0x000270FD, 0x00157B81, 0x001AC2EF, 0x001AF0FD,
		0x001EED47, 0x001D575F, 0x00026EEB, 0x00058A27, 0x000D535F, 0x001054D5, 0x00184729, 0x00165307,
		0x000F1ABB, 0x000D3671, 0x0010765B, 0x0018D2D1, 0x000924FB, 0x000E231F, 0x001D8711, 0x001D9663,
		0x0014504F, 0x00030A73, 0x00050D31, 0x001C3691, 0x0009504F, 0x0017E6FF, 0x001B2C2F, 0x0013A4D9,
		0x000754D5, 0x001C540F, 0x0007AAA9, 0x001A8BD7, 0x001DF41B, 0x000CF46B, 0x000ECC4F, 0x001A277D,
		0x000852E5, 0x0012F0FB, 0x000E504F, 0x000ACBF3, 0x00171909, 0x0019762B, 0x0005231F, 0x001870FB,
		0x0003C4F1, 0x0018B5F7, 0x0013504F, 0x000E2719, 0x00072C31, 0x000D2535, 0x000E746B, 0x0016BA91,
		0x000BC7BD, 0x00093873, 0x000BD2E5, 0x0000AB3F, 0x0006433D, 0x001EAAA9, 0x000A37AD, 0x001CF46B,
		0x0002D48F, 0x001798C5, 0x00042447, 0x0013F645, 0x0007CBF3, 0x0008409D, 0x001CFB81, 0x000FA005,
		0x000835F7, 0x0000F73B, 0x00024ED1, 0x0013EE51, 0x001F4AB9, 0x00107741, 0x000CA77D, 0x0006E073,
		0x0017645B, 0x000F6C45, 0x00103EBD, 0x0001BB2B, 0x00052D03, 0x00011CEB, 0x0017C4F1, 0x000A2D79,
		0x001ADE51, 0x0009540F, 0x000BF71F, 0x001FF739, 0x0017ED47, 0x000C2B3F, 0x00083D49, 0x000FFDE7,
		0x001EF8AD, 0x0013548F, 0x001FA447, 0x00167C99, 0x001589B9, 0x001AB2B5, 0x001629ED, 0x0017DD43,
		0x0017946F, 0x00155BE9, 0x000F2807, 0x0000593D, 0x00112719, 0x000D0475, 0x0018548F, 0x0015653D,
		0x00051909, 0x00145C17, 0x000DE671, 0x0007DB3B, 0x001CF38B, 0x0016179F, 0x001F0D31, 0x001C8D13,
		0x0015B96B, 0x0005C3BF, 0x00066EEB, 0x00015307, 0x00197C4F, 0x001F9C89, 0x0004F0FD, 0x00193A71,
		0x000BF029, 0x00029A8F, 0x001AF65B, 0x001A946F, 0x00136AF1, 0x0010E073, 0x0010A77D, 0x0011D4D5,
		0x00199FAD, 0x00007861, 0x00013D63, 0x000C4729, 0x0000762B, 0x00070D31, 0x0001BEB1, 0x0014F17B,
		0x0019EC85, 0x0019F0FD, 0x00107861, 0x0012231F, 0x000E40FB, 0x0001CAB9, 0x001B3873, 0x000D40FB,
		0x001E3FE1, 0x000D442D, 0x000B4B61, 0x00163D49, 0x00181407, 0x001B2EFB, 0x00012719, 0x001DE6FF,
		0x001902ED, 0x0010A94B, 0x0003C3C3, 0x000E9921, 0x00033D49, 0x0008C53F, 0x001FE45B, 0x0006DE51,
		0x0010E6FF, 0x0015E691, 0x000D3A91, 0x0017A535, 0x0010F8A9, 0x00081CEB, 0x0016F46B, 0x0008A535,
		0x000EDD43, 0x000B9F61, 0x001F8129, 0x00003FE1, 0x00151921, 0x0011573F, 0x0003850F, 0x000E8D13,
		0x001E277D, 0x0010FC99, 0x0013C4F1, 0x0010653D, 0x0003A9ED, 0x00077645, 0x001E3A71, 0x000F3A71,
		0x001F8615, 0x000FBDE1, 0x0018E4EF, 0x00183691, 0x001852D1, 0x000E8BD7, 0x0016AEFB, 0x000C4B83,
		0x0018B96B, 0x0006BEA9, 0x00102C2F, 0x000B146F, 0x000D117B, 0x000D8087, 0x00118A73, 0x0000EC45,
		0x000BF8AD, 0x000AB53D, 0x001339E7, 0x000DC33D, 0x001B6F35, 0x0009106B, 0x0013946F, 0x0000D7F3,
		0x000D5A5D, 0x00072AA9, 0x0007627B, 0x000A5F23, 0x000A47BD, 0x0006EE51, 0x0001F949, 0x00004641,
		0x00074B83, 0x00007949, 0x0006F0FB, 0x0014653B, 0x001D3691, 0x001F97AB, 0x0015C3C3, 0x000C0D3B,
		0x00162A4F, 0x001C0B11, 0x0003B28F, 0x0008EAF1, 0x0008EED3, 0x000AED47, 0x001710DF, 0x0013B671,
		0x00015C17, 0x00157029, 0x0014771F, 0x0003A4D9, 0x001C2633, 0x001C901B, 0x000FA77D, 0x00020E6D,
		0x0014A535, 0x0006A447, 0x00065C17, 0x000638A1, 0x00194455, 0x000A2C7D, 0x0006901B, 0x00159ABB,
		0x000A6C45, 0x0017EAF1, 0x000242EF, 0x000C1A8F, 0x00022C7D, 0x000C2447, 0x000A7861, 0x0001E691,
		0x000C6691, 0x001DB279, 0x00073EB1, 0x0011C2EF, 0x00149CEB, 0x001B8B11, 0x000002C5, 0x000DA9ED,
		0x0001294B, 0x000A2733, 0x000B746B, 0x001E5B3B, 0x000482C5, 0x0011DB3B, 0x001F1D2F, 0x00030EB9,
		0x001C3A8D, 0x00067E5D, 0x0001EC45, 0x00170D13, 0x0009146F, 0x0016E27B, 0x000262D3, 0x0019BB89,
		0x001A8129, 0x001E6C45, 0x00023A71, 0x001B43BF, 0x0010B691, 0x00079A8F, 0x0005A807, 0x001CF741,
		0x00032A4F, 0x001A396B, 0x001BD8BB, 0x00021471, 0x0014FC2F, 0x000A5307, 0x0011B691, 0x000617AB,
		0x0001EF35, 0x000D43AD, 0x00042633, 0x001D186F, 0x00051921, 0x000AD8BB, 0x000BF62B, 0x00175D4B,
		0x001A18E1, 0x000DFC99, 0x001DBD63, 0x00160087, 0x00198EB9, 0x000B7025, 0x00124729, 0x001CB691,
		0x001D1455, 0x000EF949, 0x001F3A71, 0x000A50CD, 0x000C43C3, 0x0018B8A1, 0x0018C53F, 0x001FBA71,
		0x0009F0D5, 0x00171921, 0x0010645B, 0x000802ED, 0x000BDD43, 0x000824FB, 0x00092A4F, 0x0011B8A1,
		0x001709B9, 0x00166AF1, 0x001F3943, 0x0016979F, 0x0010B873, 0x001C277D, 0x00112807, 0x001A10DF,
		0x001C454B, 0x0002BFE1, 0x001CC0FB, 0x00067025, 0x0000A77D, 0x0011F645, 0x001F2535, 0x001494C9,
		0x00081407, 0x001AE691, 0x000C0E6D, 0x00059407, 0x0001F0D5, 0x001AF645, 0x00163943, 0x0004E9E7,
		0x0010C09D, 0x000C901B, 0x0014CB61, 0x00010657, 0x00134C4F, 0x0000A4D9, 0x001BF8AD, 0x0006F741,
		0x00155DB3, 0x0013947F, 0x000AF861, 0x00168D3B, 0x001C294B, 0x00003691, 0x0008ED47, 0x00069ABB,
		0x0015CBF3, 0x000CFC2F, 0x0018681D, 0x00129FAD, 0x00161F61, 0x001717AB, 0x00135307, 0x000D2633,
		0x0009B96B, 0x0015AD79, 0x0018E53B, 0x000CCB61, 0x00025A5D, 0x00117B81, 0x001227CB, 0x000E6C45,
		0x00151663, 0x001AD695, 0x00033A8D, 0x001F6F35, 0x0009F0FB, 0x001FC641, 0x000C0A27, 0x0002E2D3,
	};

	public static void main(String[] args) throws IOException {
		final int[] GOOD = new int[]{
			0x9E3779B7, 0x91E10DA5, 0xD1B54A33, 0xABC98389, 0x8CB92BA7, 0xDB4F0B91, 0xBBE05633, 0x89E18285,
			0xC6D1D6C9, 0xAF36D01F, 0x9A69443F, 0x881403B9, 0xCEBD76D9, 0xB9C9AA3B, 0xA6F5777F, 0x86D516E5,
			0xE95E1DD1, 0xD4BC74E1, 0xC1EDBC5B, 0xB0C8AC51, 0xA127A31D, 0x92E852C9, 0x85EB75C3, 0xEBEDEED9,
			0xC862B36D, 0xB8ACD90D, 0xAA324F91, 0x9CDA5E69, 0x908E3D2D, 0x8538ECB5, 0xBF25C1FB, 0xB1AF5C05,
			0x9989A7D9, 0x8EB95D05, 0xE0504E7B, 0xD1F91E9D, 0xB7FBD901, 0xAC38B669, 0xA13614FB, 0x96E7A621,
			0x8D41E4AD, 0x843A0803, 0xF1042721, 0xC91FE60D, 0xBD5A4AD1, 0xB24512C7, 0xA7D5EB01, 0x94C37CD5,
			0x8C0E724F, 0x83DBDF3F, 0xF22EECF7, 0xE51CC09B, 0xD8BF2D51, 0xCD0C73D1, 0xC1FB5B85, 0xAD9BA24D,
			0xA43CF217, 0x9B5FB7D3, 0x92FCF6CB, 0x8B0E12CF, 0x838CCB05, 0xDB70396F, 0xBC193375, 0xA9BBB6A1,
			0x8A35060F, 0xF40BA295, 0xE8A62E75, 0xDDC8F72B, 0xD36DA013, 0xC0249885, 0xB72B9CF7, 0x9747627B,
			0x9036EA01, 0x897AE4FD, 0xF4CCD627, 0xEA171C21, 0xD60E4185, 0xCCB0DCDF, 0xC3BC5AB1, 0xBB2C2447,
			0xAB273EB1, 0xA3AA5A35, 0x88D9849B, 0xF57716BD, 0xEB5D28EB, 0xE1ADA55D, 0xC6F2B277, 0xB6E92FC9,
			0xAF62415F, 0xA13F04BD, 0x943F8703, 0x8E25C2E9, 0x884C43B5, 0x82B0645B, 0xF60E4093, 0xEC7F64E5,
			0xDA7B216D, 0xD1FE7BF7, 0xC9D63C03, 0xC1FF1A4B, 0xB337B641, 0xAC418363, 0xA5908B4B, 0x9F221D85,
			0x98F3A45F, 0x9302A3DB, 0x8D4CB8AF, 0xF6955E05, 0xDC5C91B7, 0xD44186D3, 0xBDAF3BEB, 0xB6B5103B,
			0xA98368C9, 0x9D45AB03, 0x977CB5A3, 0x8C8C366B, 0x8760BD83, 0x8265F323, 0xD64E71E3, 0xCED220B1,
			0xC09FF697, 0xB9E58585, 0xB3673E6F, 0xAD23075B, 0xA716D915, 0xA140BE91, 0x9B9ED43F, 0x962F4775,
			0x8BE04CC3, 0x86FD88C3, 0x8246750D, 0xF77CB1D7, 0xEF41DBE9, 0xDF9C098D, 0xD0FC339F, 0xCA092125,
			0xC35137BF, 0xBCD27FCF, 0xB68B1273, 0xB07918F9, 0xAA9ACC57, 0x9A250D21, 0x90103F13, 0x8B45D8CF,
			0x86A43AC3, 0x822A09C7, 0xF002ED13, 0xE8654625, 0xE1057C8D, 0xD2F7B733, 0xCC45FDB1, 0xC5CAA50D,
			0xBF83F38F, 0xB38DE4B9, 0xADDB5841, 0xA85713D1, 0x8ABA52BD, 0x86536A15, 0xF83B8239, 0xF0B35A25,
			0xDB72DC35, 0xD4CA486F, 0xCE556D09, 0xC812B845, 0xC200A49B, 0xBC1DB84D, 0xB6688515, 0xB0DFA7CD,
			0xAB81C813, 0xA64D97FB, 0xA141D3B5, 0x9C5D414B, 0x979EB049, 0x8E8EFE9F, 0x8A3BAA23, 0x8609EEE3,
			0x81F8C7E5, 0xF88EE8ED, 0xF1553311, 0xEA51424F, 0xDCE47B27, 0xD03C9BDD, 0xCA2EF613, 0xBE997F95,
			0xB90F1A29, 0xAE74CE8F, 0xA9628B9F, 0xA476060B, 0x9FAE24F5, 0x9B09D7AF, 0x96881577, 0x9227DD3D,
			0x8DE8356B, 0x81E34C0F, 0xF8DB9899, 0xF1EA3409, 0xE49ACC3B, 0xDE3A0E8B, 0xD806DE3B, 0xD1FFF5EF,
			0xC0E8BE65, 0xBB86F28B, 0xB64B9731, 0xAC43EF7B, 0x9E3EE499, 0x99D4AB95, 0x915DF131, 0x8D4FB3AD,
			0xF92258D9, 0xF273D571, 0xEBF33221, 0xE59F33F1, 0xDF76A85B, 0xD9786511, 0xD3A347C5, 0xCDF635F1,
			0xC30FF04F, 0xB8BD53F7, 0xB3C8EFED, 0xAEF69073, 0xAA454BF7, 0xA5B43F2F, 0xA1428CE7, 0x9CEF5DDB,
			0x8CC3B777, 0x8550B4B7, 0x81BD62C3, 0xECAD6DC1, 0xE690FA59, 0xE09CEC0D, 0xDAD037D9, 0xCA4C3001,
			0xC512FD47, 0xBFFC5183, 0xBB074877, 0xB63303D1, 0xB17EAAF7, 0xA419044D, 0x9BBBA271, 0x97B63B39,
			0x93CB6869, 0x8FFA7A51, 0x8C42C5C9, 0x88A3A413, 0x851C72C1, 0x81AC9397, 0xE7720D2D, 0xE1AF214F,
			0xDC10EC99, 0xD13F0697, 0xCC0992A9, 0xC6F5505B, 0xC2016C27, 0xB8778A19, 0xB3DFFEFD, 0xAF65B735,
			0xAB07F845, 0xA6C60C57, 0xA29F4217, 0x9E92ECA3, 0x96C701E9, 0x930627ED, 0x8F5D391D, 0xF9D92999,
			0xF3D82B23, 0xE844186B, 0xE2AF4337, 0xDD3CC3C5, 0xD2BB7E5F, 0xCDAB2117, 0xC8B9EAA9, 0xBF31F86F,
			0xBA99CB0F, 0xB61DE131, 0xAD7824A7, 0xA94D02AD, 0xA53B8563, 0xA1430F0B, 0x9D6305AD, 0x999AD307,
			0x95E9E475, 0x924FAAD3, 0x8ECB9A75, 0x8B5D2B07, 0x8803D777, 0x84BF1DEF, 0x818E7FAF, 0xFA0DEED9,
			0xF43F3741, 0xEE93070D, 0xE90890F1, 0xE39F0C67, 0xDE55B58F, 0xD92BCD17, 0xCF336023, 0xCA6372CF,
			0xC5B021FF, 0xAFC6001D, 0xA00117CF, 0x9C49C697, 0x98A88D81, 0x951CE92D, 0x8AF6847D, 0x87BC4D8D,
			0x8180FE8F, 0xFA3F486F, 0xF49FA91F, 0xE9C0BDF5, 0xE4800215, 0xDF5D7E31, 0xDA588471, 0xD0A48B75,
			0xC75EF4F3, 0xBA3AE02B, 0xB60B8819, 0xB1F44341, 0xADF48725, 0xAA0BCC5F, 0xA6398E99, 0xA27D4C75,
			0x9ED6877B, 0x9B44C40B, 0x97C7894D, 0x945E6123, 0x9108D811, 0x8DC67D37, 0x8A96E23D, 0x87799B49,
			0xFA6D85BD, 0xF4FA1811, 0xEFA509F9, 0xEA6DB233, 0xE5536B35, 0xDB738B33, 0xD6ACB8C9, 0xCD6E58F9,
			0xC8F5A633, 0xC495DDE1, 0xC04E7531, 0xBC1EE451, 0xB806A665, 0xB01A1E63, 0xAC44D8CD, 0xA884EF07,
			0xA4D9EA11, 0x9A51B865, 0x9075C7D5, 0x873B1719, 0x84498F5D, 0x81686E6F, 0xFA98EFEF, 0xF54F0FFD,
			0xEB106D05, 0xE61A7887, 0xDC7E65E5, 0xD7D72935, 0xD349104B, 0xCED39351, 0xCA762D55, 0xC201A07F,
			0xB9E77939, 0xB5FB1C0D, 0xB223F10D, 0xA01EB619, 0x9CBDA623, 0x996ED7BF, 0x9631E84F, 0x8FEC261B,
			0x8CE29851, 0x87005E7F, 0x815D0BFB, 0xFAC1E365, 0xF59F42F9, 0xF0978EA7, 0xEBAA3947, 0xE6D6B899,
			0xDD7B1A6B, 0xD8F1F657, 0xD48099B1, 0xD02687CD, 0xCBE3468F, 0xBF9DC6D1, 0xBBB1344F, 0xB7D93465,
			0xB4155B3B, 0xB0653F27, 0xACC878AF, 0xA93EA279, 0xA5C75937, 0xA2623BAB, 0x9F0EEA91, 0x9BCD089B,
			0x989C3A5F, 0x957C2657, 0x926C74D1, 0x8C7CE379, 0x84084133, 0x81540F2D, 0xF5EA757B, 0xF1061383,
			0xEC3A9B97, 0xE7878ED5, 0xE2EC70E1, 0xDE68C7D9, 0xD9FC1C49, 0xD5A5F919, 0xD165EB8B, 0xCD3B8325,
			0xC92651AD, 0xC139E57F, 0xBD61D91F, 0xB5EC1723, 0xB24D9C1F, 0xAEC18F6D, 0xAB47932D, 0xA7DF4B61,
			0xA4885DE1, 0xA1427249, 0x9E0D31FF, 0x9AE8481D, 0x97D3616F, 0x94CE2C6B, 0x91D85923, 0x8C199FFD,
			0x89502219, 0x8694D5D3, 0x8147B271, 0xFB0C904D, 0xECC37005, 0xE3B1B659, 0xDF4A6A77, 0xD6BCCE3D,
			0xC699FDE9, 0xBEFE7C61, 0xB7AD9447, 0xB420340D, 0xB0A46A15, 0xAD39DF49, 0xA9E03E49, 0xA6973357,
			0xA35E6C53, 0x9A129165, 0x9717C447, 0x942BB7B9, 0x914E22B5, 0x8E7EBD99, 0x83C99FAF, 0x813D274D,
			0xF1D08AF9, 0xED43566B, 0xE8CC107F, 0xDBE5BFB7, 0xD7C22743, 0xD3B28091, 0xC433F035, 0xC0828467,
			0xBCE2E433, 0xB954B9D7, 0xB5D7B133, 0xB26B77B9, 0xAF0FBC67, 0xABC42FC9, 0xA55C6C2F, 0x9F31CE91,
			0x99420F2B, 0x965F9259, 0x88BE7A7B, 0x862B90A5, 0x83A50DD7, 0xFB50D045, 0xF6B791E9, 0xE96B8497,
			0xE5261A7F, 0xE0F4B24F, 0xDCD6EE4F, 0xD8CC727B, 0xD0EFEBB9, 0xCD1D3113, 0xC95C5F1B, 0xC5AD21EF,
			0xC20F2731, 0xBE821E09, 0xBB05B719, 0xB0F14B83, 0xADB47065, 0xAA86BFE7, 0xA457C3ED, 0xA155EE39,
			0x9E622EAD, 0x9B7C434D, 0x98A3EB51, 0x95D8E71F, 0x9069E18D, 0x8DC566B9, 0x8B2D4CBD, 0x83AD0557,
			0x8144356D, 0xFB6D5599, 0xF6EF948D, 0xEE3151B7, 0xE5C24EC9, 0xDD9FBD6F, 0xD9AA45DB, 0xD5C6E8C7,
			0xD1F55367, 0xCE35346F, 0xCA863C03, 0xC6E81BB7, 0xBFDD30C1, 0xBC6FD021, 0xB9121BAF, 0xB5C3CBBD,
			1
		};


//		int[] GOLDEN_INTS = new int[MathTools.GOLDEN_LONGS.length];
//		for (int i = 0; i < GOLDEN_INTS.length; i++) {
//			GOLDEN_INTS[i] = (int)(MathTools.GOLDEN_LONGS[i] >>> 32) | 1;
//		}
		final Vector2[] spiral = generateVectorSpiral(LEN);
		final long THRESHOLD = (long) (Math.pow(LEN, 11.0 / 10.0));// (long)(Math.pow(LEN, 7.0/6.0));
//		IntLongOrderedMap problems = new IntLongOrderedMap(100);
		final int[] problems = {0};
		IntIntOrderedMap good = new IntIntOrderedMap(513 * 512);
		for (int x = 0; x < 512; x++) {
			for (int y = x; y < 513; y++) {
				good.put(GOOD[x] * GOOD[y] & 0x1FFFFF, 0);
			}
		}
		int[] GOLDEN_INTS = good.keySet().toArray();
//		int[] GOLDEN_INTS = GOOD;
		final int COUNT = GOLDEN_INTS.length;
		long[] minMax = new long[]{Long.MAX_VALUE, Long.MIN_VALUE, Long.MAX_VALUE, Long.MIN_VALUE};
		short[] chosen = new short[512];
		for (int a = 0; a < COUNT; a++) {
			final int g = GOLDEN_INTS[a];
			{
				final int finalA = a;
				ObjectSet set = new ObjectSet(51, 0.6f) {
					long collisionTotal = 0;
					int longestPileup = 0;
					int hm = 0x17AD97;

					@Override
					protected int place(Object item) {
//						final int h = BitConversion.imul(item.hashCode(), hm);
//						return (h ^ h << 16) >>> shift;
//						return BitConversion.imul(item.hashCode(), hm) & mask; // UNUSABLE FOR VECTORS
//						final int h = item.hashCode();
//						return BitConversion.imul(h ^ h >>> 16, hm) >>> shift;
						return (int) (long) ((double) item.hashCode() * (double) hm) >>> shift; // GWT behavior
					}

					@Override
					protected void addResize(Object key) {
						Object[] keyTable = this.keyTable;
						for (int i = place(key), p = 0; ; i = i + 1 & mask) {
							if (keyTable[i] == null) {
								keyTable[i] = key;
								return;
							} else {
								collisionTotal++;
								longestPileup = Math.max(longestPileup, ++p);
								good.put(g, longestPileup);
							}
						}
					}

					@Override
					protected void resize(int newSize) {
						int oldCapacity = keyTable.length;
						threshold = (int) (newSize * loadFactor);
						mask = newSize - 1;
						shift = BitConversion.countLeadingZeros(mask) + 32;

//						int index = (hm ^ hm >>> 17 ^ shift) & 511;
//						chosen[index]++;
//						hashMultiplier = hm = GOOD[index];
						Object[] oldKeyTable = keyTable;

						keyTable = new Object[newSize];

						collisionTotal = 0;
						longestPileup = 0;

						if (size > 0) {
							for (int i = 0; i < oldCapacity; i++) {
								Object key = oldKeyTable[i];
								if (key != null) {
									addResize(key);
								}
							}
						}
						if (collisionTotal > THRESHOLD || longestPileup > 25) {
//							System.out.printf("  WHOOPS!!!  Multiplier %08X on index %4d has %d collisions and %d pileup\n", hashMultiplier, finalA, collisionTotal, longestPileup);
							problems[0]++;
//							good.remove(g);
							throw new RuntimeException();
						}
					}

					@Override
					public void clear() {
						System.out.print(Base.BASE10.unsigned(finalA) + "/" + Base.BASE10.unsigned(COUNT) + ": Original 0x" + Base.BASE16.unsigned(g) + " on latest " + Base.BASE16.unsigned(hm));
						System.out.println(" gets total collisions: " + collisionTotal + ", PILEUP: " + longestPileup);
						minMax[0] = Math.min(minMax[0], collisionTotal);
						minMax[1] = Math.max(minMax[1], collisionTotal);
						minMax[2] = Math.min(minMax[2], longestPileup);
						minMax[3] = Math.max(minMax[3], longestPileup);
						super.clear();
					}

					@Override
					public void setHashMultiplier(int hashMultiplier) {
						this.hashMultiplier = hashMultiplier | 1;
						hm = this.hashMultiplier;
						resize(keyTable.length);
					}
				};
				set.setHashMultiplier(g);
				try {
					for (int i = 0, n = spiral.length; i < n; i++) {
						set.add(spiral[i]);
					}
				} catch (RuntimeException ignored) {
					System.out.println(g + " FAILURE");
					continue;
				}
				set.clear();
			}
		}
		System.out.println("This used a threshold of " + THRESHOLD);
		System.out.println("Indices used: ");
		for (int y = 0, idx = 0; y < 32; y++) {
			for (int x = 0; x < 16; x++) {
				System.out.print(Base.BASE16.unsigned(chosen[idx++]) + " ");
			}
			System.out.println();
		}
		good.sortByValue(IntComparators.NATURAL_COMPARATOR);
		good.truncate(1024);
		System.out.println("\n\nint[] GOOD_MULTIPLIERS = new int[]{");
		for (int i = 0; i < Integer.highestOneBit(good.size()); i++) {
			System.out.print("0x" + Base.BASE16.unsigned(good.keyAt(i)) + "=0x" + Base.BASE16.unsigned(good.getAt(i)) + ", ");
			if ((i & 7) == 7)
				System.out.println();
		}
		System.out.println("};\n");
		System.out.println(problems[0] + " problem multipliers in total, " + (COUNT - problems[0]) + " likely good multipliers in total.");
		System.out.println("Lowest collisions : " + minMax[0]);
		System.out.println("Highest collisions: " + minMax[1]);
		System.out.println("Lowest pileup     : " + minMax[2]);
		System.out.println("Highest pileup    : " + minMax[3]);
	}

}
