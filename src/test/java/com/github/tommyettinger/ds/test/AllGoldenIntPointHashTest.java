/*
 * Copyright (c) 2022-2025 See AUTHORS file.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.github.tommyettinger.ds.test;

import com.github.tommyettinger.digital.Base;
import com.github.tommyettinger.digital.BitConversion;
import com.github.tommyettinger.digital.MathTools;
import com.github.tommyettinger.ds.IntIntOrderedMap;
import com.github.tommyettinger.ds.IntLongOrderedMap;
import com.github.tommyettinger.ds.IntSet;
import com.github.tommyettinger.ds.Utilities;
import com.github.tommyettinger.ds.support.sort.IntComparators;
import com.github.tommyettinger.ds.support.sort.LongComparators;
import org.jetbrains.annotations.NotNull;

import java.io.IOException;

import static com.github.tommyettinger.ds.test.PileupTest.*;

/**
 * This uses a different collision tracking method than before; it counts every collision at every size.
 * Using the original 31-based simple hashing, this fails to get under its threshold every time.
 * But, with a no-multiplication Rosenberg-Strong-based hash, it gets:
 * 32 problem multipliers in total, 480 likely good multipliers in total.
 * Lowest collisions : 57908
 * Highest collisions: 547989
 * Lowest pileup     : 1
 * Highest pileup    : 14
 * Adjusting the threshold to be much higher, and switching Point2.hashCode() to be what GridPoint2 uses:
 * 121 problem multipliers in total, 391 likely good multipliers in total.
 * Lowest collisions : 5212413
 * Highest collisions: 6730145
 * Lowest pileup     : 16
 * Highest pileup    : 161
 * With changing hm re-enabled, using (hm ^ hm >>> 17 ^ shift) & 511 :
 * 168 problem multipliers in total, 344 likely good multipliers in total.
 * Lowest collisions : 5217694
 * Highest collisions: 6730266
 * Lowest pileup     : 16
 * Highest pileup    : 116
 * With changing hm re-enabled, using BitConversion.imul(hm, shift) >>> 5 & 511 :
 * 97 problem multipliers in total, 415 likely good multipliers in total.
 * Lowest collisions : 5267486
 * Highest collisions: 5749688
 * Lowest pileup     : 16
 * Highest pileup    : 78
 * With a completely different set of multipliers drawn from a much larger pool:
 * 0 problem multipliers in total, 512 likely good multipliers in total.
 * Lowest collisions : 5212426
 * Highest collisions: 5288324
 * Lowest pileup     : 16
 * Highest pileup    : 30
 */
public class AllGoldenIntPointHashTest {
	public static int fixGamma(int gamma, int threshold) {
		gamma |= 1;
		int inverse, add = 0;
		while (Math.abs(Integer.bitCount(gamma) - 16) > threshold
			|| Math.abs(Integer.bitCount(gamma ^ gamma >>> 1) - 16) > threshold
			|| Math.abs(Integer.bitCount(inverse = MathTools.modularMultiplicativeInverse(gamma)) - 16) > threshold
			|| Math.abs(Integer.bitCount(inverse ^ inverse >>> 1) - 16) > threshold) {
			gamma = gamma * 0xDE82EF95 + (add += 2);
		}
		return gamma;
	}

	/**
	 * The best 600 out of 5120 multipliers selected subrandomly via {@link #fixGamma(int, int)}, with likely
	 * only 512 actually going to be used.
	 */
	public static final int[] TEN_PERCENT_MULTIPLIERS = new int[]{
		0xF3292887, //131722
		0x358845BF, //134468
		0x229CF84B, //134938
		0x66A8F137, //137821
		0x5AC70F23, //138287
		0x22BD2F19, //139695
		0xC7CB6B81, //140476
		0xC28A3BF3, //140830
		0xC1A9C6B9, //141163
		0x89B80DB9, //141620
		0xA70C4EAF, //141718
		0xF68DCC19, //141773
		0x6FA8CD19, //141930
		0x8F381579, //142027
		0xBE445AE3, //142302
		0xEAE02E85, //142514
		0x9E18B89D, //143256
		0x3BE28E65, //143318
		0x283EDE53, //143807
		0x8AE3C1D9, //144545
		0xF7281A63, //144822
		0x3EA8A0B7, //145925
		0x7E4B582D, //146088
		0x7C0B992D, //146162
		0x281BBD4D, //146162
		0xFF424425, //146329
		0x732D0CC3, //147004
		0x5B649CF1, //147534
		0xE30A362F, //147573
		0x930173AD, //148231
		0x6B21F0D7, //148507
		0x93034E3D, //148745
		0x8DC3A4CF, //148848
		0x9F22D9C5, //149612
		0xB2A8F063, //150025
		0x6F88A913, //150123
		0x9F4E8629, //150208
		0x96614CE3, //150791
		0x129BDCC5, //151068
		0xBE3A4691, //151326
		0x367E58A3, //151392
		0x52431FAD, //151587
		0xBECD1711, //151792
		0x787758A3, //152010
		0xE82054BF, //152195
		0x3AE17943, //152758
		0xDA137C69, //153187
		0xA19ACF23, //154666
		0xB836F215, //154756
		0x570D8D89, //155053
		0xCECCCC93, //155096
		0x73842AA7, //155160
		0x3A63E969, //155264
		0x1F859A5D, //155661
		0x85B9EE21, //155984
		0x8C9E9B47, //156005
		0xA4E462FB, //156363
		0x30AFA473, //156532
		0x5A621E7B, //156684
		0x9702D3D1, //156910
		0xF306B517, //157313
		0x9C3B14D3, //158042
		0x12CFACE5, //158466
		0xF1C94D19, //158491
		0x9E623365, //158606
		0x51F4F481, //158646
		0x9B816B37, //159024
		0x5A6C0F2F, //159114
		0xBB932327, //159370
		0x5C7AA6C3, //159435
		0x4A1F1765, //159595
		0x0CBE68C9, //159619
		0x06D71B59, //159979
		0xD9D2A03D, //160056
		0x24CAF933, //160195
		0x7D934E85, //160196
		0xE1523E87, //160288
		0x1997B227, //160416
		0x5D781163, //160592
		0xA0C4EF59, //160850
		0xD84F5723, //160940
		0x9C65D0E7, //160949
		0x63487CC9, //161046
		0xBA03D097, //161092
		0x566C7933, //161279
		0x0D118DEB, //161393
		0x538EBE13, //162120
		0x33A325E3, //162227
		0x5B1A60C7, //162348
		0x64227B3D, //162583
		0xE622CE13, //163014
		0xB0DD8D11, //163113
		0xABB20633, //163227
		0xC393A4E3, //163233
		0x827364DD, //163490
		0x06F51D89, //163508
		0x4FBAC1B1, //163596
		0x9B5D03B9, //163628
		0x2DE311B5, //163636
		0xE46510D7, //163711
		0x753E25E1, //163837
		0x714B185F, //163862
		0x7290D9F9, //164040
		0x0A43B36F, //164140
		0xCFD99131, //164174
		0x31E21D4B, //164274
		0x2099599F, //164396
		0x4B347979, //164446
		0x30CD0D77, //164498
		0xCBE42CC5, //164500
		0xDC8D06E5, //164553
		0xF51C8E29, //164589
		0xFA611AA1, //164612
		0xFAD008AF, //164689
		0xF6263359, //165314
		0x1AD20E77, //165744
		0x6635DE13, //165907
		0xC076AB89, //166045
		0xCCBB9603, //166234
		0x42A0F6F9, //166391
		0x8C7AB02D, //166908
		0x212C753B, //166937
		0x6B62FE09, //167022
		0xFA508339, //167447
		0x4CE8DE59, //167599
		0x43D86695, //167793
		0x6DEC2521, //167884
		0x174346B9, //167887
		0xD0E4D4F1, //167934
		0xBF0E8593, //167957
		0x2F6435E3, //168108
		0x63243B2F, //168378
		0x5C1A27A3, //168428
		0x3571E1A5, //168636
		0xF3B86451, //168914
		0xB7A181D9, //169065
		0x4B054BE3, //169140
		0xC38B9D8D, //169222
		0xC245875D, //169306
		0x1B97AD07, //169405
		0x56687707, //169410
		0x3B4C3897, //169649
		0x5684FD43, //169785
		0x088DBCF5, //169796
		0xCBE84351, //169899
		0xD86BDD11, //170073
		0xEFA47825, //170103
		0x3C5B0A8B, //170203
		0xC5C1D63D, //170266
		0x395A9F03, //170378
		0xFA491B1B, //170407
		0x894F8F29, //170433
		0xB6EB8E81, //170506
		0x8F6B0B0B, //170670
		0x92DE878D, //170909
		0x8A523F0B, //171121
		0x9BC46991, //171294
		0x428FFA25, //171303
		0x4FC75191, //171313
		0x38936E99, //171395
		0xECA2221F, //171914
		0x651EF217, //171918
		0x986EAEC3, //171920
		0x6851EE29, //172079
		0xBD241CCB, //172155
		0xA6821FA7, //172272
		0x83E8A3A7, //172403
		0x28E8E4E3, //172412
		0x2FB9506D, //172713
		0x1643C735, //172761
		0x5578B187, //172888
		0x856E837B, //172921
		0x2ED8DD09, //173184
		0x3ECBA2C3, //173415
		0xA789870B, //173437
		0x9434196F, //173607
		0x1383AD33, //173613
		0x1AFD3891, //173630
		0xB0436D4F, //173969
		0xB76A01F1, //174169
		0xCFB260A3, //174189
		0xA6B86E0F, //174292
		0x17B2C879, //174318
		0x2B71B0F3, //174549
		0xCC350D87, //174617
		0x6148553F, //174678
		0x71149B63, //174710
		0xE69E5C21, //174819
		0x32A3E64B, //175111
		0x19F49B4D, //175205
		0x57F10759, //175284
		0xE8D4987B, //175321
		0x64F64F19, //176332
		0x1B11C769, //176353
		0x05995CF7, //176438
		0xC9C53E19, //176451
		0x81B6E3B3, //176783
		0x97B6602B, //176799
		0x66C91CE7, //177135
		0x8958C2F3, //177390
		0xC66CCC35, //177414
		0x97E1269B, //177665
		0xBB7114E3, //177681
		0xD0AC4CBF, //177690
		0x15DEA065, //177827
		0x8B9A3147, //177872
		0x4CC323E9, //177938
		0x3E30CBB5, //178068
		0x5EE50269, //178155
		0x979090FD, //178184
		0x76C81DB1, //178185
		0x6ECE2065, //178268
		0xB2471C67, //178375
		0x41BB6397, //178375
		0x5ED045BB, //178379
		0xB0851CF3, //178857
		0xBE1B0D61, //178931
		0xBC2D6709, //178939
		0xF1449C6B, //178962
		0x8AE4C7C1, //178994
		0x83739745, //179144
		0x9257A073, //179245
		0x430F51DD, //179441
		0x9B1460ED, //179517
		0x89ACD04F, //179659
		0x6116BFD1, //179664
		0x106EE2B5, //179672
		0x43C7335D, //179742
		0x1908FA6D, //179757
		0x76EA7C09, //179773
		0x45D4E1A3, //179782
		0x330C7EA5, //179847
		0x4F19EE29, //179875
		0xAE3E420D, //180268
		0xE31473A3, //180424
		0x463F4547, //180432
		0x5AB2CF03, //180505
		0x4F616C9D, //180513
		0xBCFA3131, //180523
		0x8F195C17, //180599
		0x9CD29703, //180622
		0x38C72A87, //180640
		0x2E97B03D, //180697
		0xC44513BB, //180989
		0x21AE22AF, //181029
		0x6F43EA15, //181079
		0xAC0D8973, //181169
		0xE074EC93, //181185
		0x7B738229, //181235
		0xA8B279F1, //181260
		0xC7363313, //181308
		0x3C48AB77, //181416
		0xC90CC5EB, //181435
		0x13A3AF69, //181676
		0x4F01594F, //181803
		0x428CF8B7, //181852
		0x61D1A9B1, //181879
		0xE08272D7, //182065
		0xC097B235, //182109
		0x3A6D1A87, //182166
		0x6CD0A1AF, //182268
		0xB2F0C36B, //182430
		0xC886BF13, //182489
		0x520DD8B9, //182496
		0xF6789851, //182541
		0x4DE14C59, //182571
		0x3C44BBA9, //182589
		0xC704F5D1, //182594
		0x2FE85135, //182775
		0x30BBE89D, //182812
		0x8E117633, //182818
		0x27C578C5, //182839
		0xE87B14C1, //182848
		0xE5A7CA21, //182944
		0x1A397D0B, //182973
		0xF8ED11A1, //183003
		0xA907507B, //183049
		0x477A8273, //183087
		0xC33B6425, //183156
		0xC7379487, //183310
		0x1A34FA3B, //183344
		0x76A039D9, //183429
		0x8634DD87, //183491
		0x7A9A3905, //183500
		0x945309EF, //183748
		0x89FBB015, //183752
		0x212C7BCD, //183899
		0x85FD4CC9, //183940
		0x905DBCC3, //184017
		0xE0C215DD, //184137
		0x5B06BCC7, //184226
		0xF2D0318B, //184388
		0xBC29C729, //184400
		0x7F22225D, //184409
		0x3393297B, //184556
		0x88197EA3, //184578
		0x10CD71DB, //184601
		0x9D647989, //184604
		0x6626C4F7, //184616
		0xF225A163, //184625
		0x750CC587, //184887
		0x80B1CED3, //185019
		0x1152F70B, //185187
		0xADFE5181, //185240
		0x4DC6333D, //185252
		0x7222F86D, //185300
		0x7246CB67, //185325
		0x2C347197, //185455
		0x524667DD, //185527
		0x2DCF9A25, //185651
		0x4B91E1BD, //185694
		0xA073EB99, //185909
		0xC789393D, //185931
		0xA3313E4D, //186169
		0x0FD143AD, //186272
		0xC29B311D, //186361
		0x473925EB, //186370
		0x634C4DF3, //186498
		0xB077A347, //186509
		0x8DB2E1C5, //186698
		0x67B15889, //186803
		0x06BED13D, //186826
		0xE00AF4ED, //186830
		0x2857B8CF, //187013
		0xB7700697, //187030
		0x59284FC3, //187047
		0x582351BD, //187062
		0xD02497D3, //187068
		0x3270DD29, //187183
		0x3C5C9D63, //187184
		0x3B9909EB, //187185
		0x0AD1A9CF, //187358
		0xAF32E0B1, //187449
		0xB699C483, //187460
		0xA1AB03AF, //187501
		0xAAC09C6F, //187504
		0x253E1AD1, //187538
		0x364A6873, //187756
		0x9094DE3F, //187803
		0x3DD82CA3, //187887
		0xBA9D0F03, //187961
		0x689BC741, //187966
		0x995E1D1B, //188035
		0xBBD8158B, //188078
		0x606AEE19, //188176
		0xCF45AF09, //188304
		0x153989E3, //188476
		0xD8DB3D01, //188477
		0xE6943A07, //188641
		0x93CB1137, //188702
		0x0E63E855, //188733
		0x4EBF8491, //188814
		0x9F6143D9, //189110
		0x60E876D7, //189218
		0xD8738497, //189306
		0x25BDC487, //189313
		0x573F3A21, //189472
		0x36D7838B, //189502
		0xFF49842B, //189638
		0x67213273, //189639
		0xF18265AF, //189748
		0xC5D75823, //189769
		0x204DE95F, //189785
		0xE8D88617, //189806
		0x49C53273, //189887
		0xBBA5A407, //189899
		0x65AE0971, //189928
		0x8149927F, //189953
		0xC25E388B, //189987
		0x64EA1789, //190046
		0x02DABFA3, //190108
		0x321D725D, //190249
		0x98B8BB0B, //190323
		0xD0B0573B, //190361
		0x49561FC9, //190374
		0xF500AEAF, //190394
		0x461BBD41, //190403
		0x8475944F, //190452
		0x104355FB, //190549
		0x3B63B615, //190616
		0x85671F4B, //190663
		0x2E605679, //190667
		0xD1F02DAD, //190721
		0xE1F23929, //190822
		0x9B86C6C7, //190830
		0x8EB4F013, //190956
		0x49AEA703, //190988
		0x2631D28F, //191111
		0xE9032577, //191129
		0xEB4E08E9, //191305
		0x152B1F19, //191404
		0x1BF4A235, //191447
		0x47722377, //191600
		0x6E1530B9, //191632
		0x02DB8F69, //191637
		0xF71507D1, //191671
		0xD6A076E1, //191676
		0x45A1875D, //191682
		0x043B9D6D, //191689
		0x4124BD2F, //191701
		0x165C1779, //191732
		0x721A86DD, //191759
		0x848EE16B, //191799
		0x2F75CC0D, //191859
		0x8E43127D, //191880
		0x06D4B86F, //191940
		0xF287432F, //191997
		0x60B6835D, //192114
		0x4FD1119B, //192229
		0x9D004BF5, //192366
		0x5E8DF20B, //192425
		0x1A359B61, //192434
		0x8CFA5D81, //192461
		0xE10EE235, //192489
		0xCABC4391, //192597
		0x1A91E1D3, //192604
		0xD40983EB, //192623
		0xE348B88F, //192754
		0x085A8EFD, //192775
		0xA1B90DC3, //192831
		0xD631F089, //193015
		0x2346987B, //193092
		0x4E503EE5, //193165
		0xFE8958A1, //193176
		0x0CF36C29, //193238
		0x1CEEA9E1, //193249
		0x8179137D, //193263
		0xEAC1371B, //193313
		0xBCAEC00B, //193342
		0xF40154F5, //193481
		0xE747A8C3, //193573
		0x652119BB, //193604
		0xC24DB1B3, //193607
		0x7E80AB8B, //193628
		0x891F0DD7, //193759
		0x14CFA84F, //193812
		0x7C351E89, //193875
		0xD168D9E3, //193876
		0x64CA20FB, //193915
		0xBE14C11B, //193987
		0x07D76B13, //194011
		0x8EE84277, //194091
		0x1B19664B, //194128
		0xE5DC4A41, //194132
		0xBC699705, //194148
		0x6B12CC8F, //194234
		0xCF243CE5, //194274
		0x3671BC55, //194413
		0xCDB8B061, //194438
		0x2D718797, //194451
		0xD9370343, //194506
		0xA5BC2771, //194523
		0x36136793, //194525
		0xE4921CA7, //194738
		0xDD02323D, //194740
		0x0454F7DD, //194850
		0x88EE309B, //194965
		0xA8E5F4C1, //194977
		0xA49DBE11, //194991
		0x8362A6CF, //195069
		0xCE2C6E29, //195103
		0xEAEB9D01, //195153
		0xB3C0C15B, //195239
		0xEF915323, //195261
		0x0DBD0B79, //195307
		0x8B5833C5, //195367
		0xD06B0775, //195375
		0x28E5E987, //195381
		0x0B2766F3, //195385
		0xACD1EE11, //195387
		0x24BF59A1, //195398
		0x269BBE19, //195557
		0xD6BF00C9, //195583
		0x9C732A71, //195753
		0xEA508BF3, //195815
		0x2DA0E96F, //196048
		0x346168DF, //196144
		0x58C61DD5, //196230
		0xE6C324ED, //196289
		0xD0637991, //196375
		0x5526E01F, //196403
		0xE330B88D, //196460
		0x5E5D161D, //196515
		0xF9D74113, //196542
		0x156B8EC7, //196616
		0x92F70973, //196620
		0x62837C8D, //196626
		0x3D27E691, //196629
		0x84B8DF63, //196630
		0x519876CF, //196736
		0xE5341D73, //196851
		0x7F296185, //196949
		0x2D1FE285, //197004
		0x8A5C81BD, //197025
		0xD825378F, //197122
		0x0D7E158B, //197126
		0xF3423D63, //197131
		0x618D1B7B, //197141
		0xC04BD743, //197143
		0x9DD0FA15, //197164
		0xFDA4C233, //197239
		0x7A6C3527, //197268
		0xF968C513, //197364
		0x8A28FCEB, //197382
		0xA7C4EC87, //197500
		0x9BC1D439, //197528
		0x72F9D491, //197589
		0xC56055E3, //197709
		0xC6F985D1, //197785
		0x750F1A57, //197856
		0xD408EBBB, //197872
		0xD9991E35, //197887
		0xD34365E3, //197900
		0xEDB42E13, //197904
		0x2CBC65C3, //197908
		0x1A1798ED, //197930
		0xD9738547, //197972
		0x8B14FF43, //197982
		0xA78BD08F, //198047
		0x7A656F09, //198092
		0x6B90F519, //198102
		0xF918CA2B, //198120
		0x09CE2E4B, //198128
		0x57C21B4F, //198309
		0xEC81BAE5, //198325
		0x52709B2F, //198383
		0xF8DC548B, //198449
		0x9F0729CD, //198482
		0xE8C93BC3, //198572
		0x9B9C2F89, //198760
		0xC8ED20E9, //198962
		0x5A6FC1A3, //198984
		0x855ECF21, //199020
		0xF816A06B, //199148
		0x8C319A3B, //199185
		0xBA0D9C5B, //199193
		0xE169385B, //199196
		0x1C578CA9, //199201
		0xB13C2B99, //199316
		0xC3F62D21, //199318
		0x15ED7781, //199357
		0xA1910DCF, //199374
		0xC2B5CF85, //199383
		0xF7B440A5, //199498
		0x37AF2D09, //199544
		0x05235B67, //199545
		0xBB390E8D, //199567
		0xBFD85441, //199580
		0x678C8EA5, //199605
		0x73916499, //199629
		0x727C1969, //199639
		0xE9C8C473, //199673
		0x7B088A7B, //199682
		0xACBCF089, //199711
		0xE24BB38D, //199722
		0x6346AE73, //199798
		0x7E158B27, //199815
		0x41A543BF, //199879
		0x3027954F, //199883
		0x450D1B6F, //199934
		0x53B19C8B, //199993
		0x5D09DCE5, //200025
		0xE5F0B097, //200029
		0x6452FD0D, //200059
		0x49662E79, //200071
		0x8A84F22F, //200072
		0x31E5333D, //200155
		0x15C8EE97, //200380
		0x7E545CC9, //200413
		0x4E2F2D27, //200414
		0x3427976D, //200456
		0xED11F341, //200491
		0xFD3A1165, //200586
		0x917071D5, //200613
		0xC4899E9B, //200621
		0x5163875B, //200655
		0x192C5BD9, //200679
		0x1DA06ABD, //200696
		0x28EA3D8F, //200754
		0x456675E1, //200891
		0x823571BB, //200992
		0x8159B373, //201024
		0xA2D60FC9, //201037
		0x509BD05D, //201123
		0x9DC40BE9, //201126
		0x2C9829EB, //201174
		0x93772133, //201202
		0x4AEDE281, //201202
		0x43A2DE33, //201221
		0x49D7C32D, //201224
		0x5CE32989, //201235
		0x0B9DD14B, //201255
		0xCE1C1BB5, //201295
		0x21E4BC99, //201353
		0xEEC84615, //201363
		0x8843CEAB, //201385
		0x47D0936D, //201401
		0x84DEDB09, //201404
		0x4E90F391, //201441
		0x83B3C571, //201527
	};
	public static void main(String[] args) throws IOException {
		final int[] GOOD =
//			new int[]{
//			0x9E3779B7, 0x91E10DA5, 0xD1B54A33, 0xABC98389, 0x8CB92BA7, 0xDB4F0B91, 0xBBE05633, 0x89E18285,
//			0xC6D1D6C9, 0xAF36D01F, 0x9A69443F, 0x881403B9, 0xCEBD76D9, 0xB9C9AA3B, 0xA6F5777F, 0x86D516E5,
//			0xE95E1DD1, 0xD4BC74E1, 0xC1EDBC5B, 0xB0C8AC51, 0xA127A31D, 0x92E852C9, 0x85EB75C3, 0xEBEDEED9,
//			0xC862B36D, 0xB8ACD90D, 0xAA324F91, 0x9CDA5E69, 0x908E3D2D, 0x8538ECB5, 0xBF25C1FB, 0xB1AF5C05,
//			0x9989A7D9, 0x8EB95D05, 0xE0504E7B, 0xD1F91E9D, 0xB7FBD901, 0xAC38B669, 0xA13614FB, 0x96E7A621,
//			0x8D41E4AD, 0x843A0803, 0xF1042721, 0xC91FE60D, 0xBD5A4AD1, 0xB24512C7, 0xA7D5EB01, 0x94C37CD5,
//			0x8C0E724F, 0x83DBDF3F, 0xF22EECF7, 0xE51CC09B, 0xD8BF2D51, 0xCD0C73D1, 0xC1FB5B85, 0xAD9BA24D,
//			0xA43CF217, 0x9B5FB7D3, 0x92FCF6CB, 0x8B0E12CF, 0x838CCB05, 0xDB70396F, 0xBC193375, 0xA9BBB6A1,
//			0x8A35060F, 0xF40BA295, 0xE8A62E75, 0xDDC8F72B, 0xD36DA013, 0xC0249885, 0xB72B9CF7, 0x9747627B,
//			0x9036EA01, 0x897AE4FD, 0xF4CCD627, 0xEA171C21, 0xD60E4185, 0xCCB0DCDF, 0xC3BC5AB1, 0xBB2C2447,
//			0xAB273EB1, 0xA3AA5A35, 0x88D9849B, 0xF57716BD, 0xEB5D28EB, 0xE1ADA55D, 0xC6F2B277, 0xB6E92FC9,
//			0xAF62415F, 0xA13F04BD, 0x943F8703, 0x8E25C2E9, 0x884C43B5, 0x82B0645B, 0xF60E4093, 0xEC7F64E5,
//			0xDA7B216D, 0xD1FE7BF7, 0xC9D63C03, 0xC1FF1A4B, 0xB337B641, 0xAC418363, 0xA5908B4B, 0x9F221D85,
//			0x98F3A45F, 0x9302A3DB, 0x8D4CB8AF, 0xF6955E05, 0xDC5C91B7, 0xD44186D3, 0xBDAF3BEB, 0xB6B5103B,
//			0xA98368C9, 0x9D45AB03, 0x977CB5A3, 0x8C8C366B, 0x8760BD83, 0x8265F323, 0xD64E71E3, 0xCED220B1,
//			0xC09FF697, 0xB9E58585, 0xB3673E6F, 0xAD23075B, 0xA716D915, 0xA140BE91, 0x9B9ED43F, 0x962F4775,
//			0x8BE04CC3, 0x86FD88C3, 0x8246750D, 0xF77CB1D7, 0xEF41DBE9, 0xDF9C098D, 0xD0FC339F, 0xCA092125,
//			0xC35137BF, 0xBCD27FCF, 0xB68B1273, 0xB07918F9, 0xAA9ACC57, 0x9A250D21, 0x90103F13, 0x8B45D8CF,
//			0x86A43AC3, 0x822A09C7, 0xF002ED13, 0xE8654625, 0xE1057C8D, 0xD2F7B733, 0xCC45FDB1, 0xC5CAA50D,
//			0xBF83F38F, 0xB38DE4B9, 0xADDB5841, 0xA85713D1, 0x8ABA52BD, 0x86536A15, 0xF83B8239, 0xF0B35A25,
//			0xDB72DC35, 0xD4CA486F, 0xCE556D09, 0xC812B845, 0xC200A49B, 0xBC1DB84D, 0xB6688515, 0xB0DFA7CD,
//			0xAB81C813, 0xA64D97FB, 0xA141D3B5, 0x9C5D414B, 0x979EB049, 0x8E8EFE9F, 0x8A3BAA23, 0x8609EEE3,
//			0x81F8C7E5, 0xF88EE8ED, 0xF1553311, 0xEA51424F, 0xDCE47B27, 0xD03C9BDD, 0xCA2EF613, 0xBE997F95,
//			0xB90F1A29, 0xAE74CE8F, 0xA9628B9F, 0xA476060B, 0x9FAE24F5, 0x9B09D7AF, 0x96881577, 0x9227DD3D,
//			0x8DE8356B, 0x81E34C0F, 0xF8DB9899, 0xF1EA3409, 0xE49ACC3B, 0xDE3A0E8B, 0xD806DE3B, 0xD1FFF5EF,
//			0xC0E8BE65, 0xBB86F28B, 0xB64B9731, 0xAC43EF7B, 0x9E3EE499, 0x99D4AB95, 0x915DF131, 0x8D4FB3AD,
//			0xF92258D9, 0xF273D571, 0xEBF33221, 0xE59F33F1, 0xDF76A85B, 0xD9786511, 0xD3A347C5, 0xCDF635F1,
//			0xC30FF04F, 0xB8BD53F7, 0xB3C8EFED, 0xAEF69073, 0xAA454BF7, 0xA5B43F2F, 0xA1428CE7, 0x9CEF5DDB,
//			0x8CC3B777, 0x8550B4B7, 0x81BD62C3, 0xECAD6DC1, 0xE690FA59, 0xE09CEC0D, 0xDAD037D9, 0xCA4C3001,
//			0xC512FD47, 0xBFFC5183, 0xBB074877, 0xB63303D1, 0xB17EAAF7, 0xA419044D, 0x9BBBA271, 0x97B63B39,
//			0x93CB6869, 0x8FFA7A51, 0x8C42C5C9, 0x88A3A413, 0x851C72C1, 0x81AC9397, 0xE7720D2D, 0xE1AF214F,
//			0xDC10EC99, 0xD13F0697, 0xCC0992A9, 0xC6F5505B, 0xC2016C27, 0xB8778A19, 0xB3DFFEFD, 0xAF65B735,
//			0xAB07F845, 0xA6C60C57, 0xA29F4217, 0x9E92ECA3, 0x96C701E9, 0x930627ED, 0x8F5D391D, 0xF9D92999,
//			0xF3D82B23, 0xE844186B, 0xE2AF4337, 0xDD3CC3C5, 0xD2BB7E5F, 0xCDAB2117, 0xC8B9EAA9, 0xBF31F86F,
//			0xBA99CB0F, 0xB61DE131, 0xAD7824A7, 0xA94D02AD, 0xA53B8563, 0xA1430F0B, 0x9D6305AD, 0x999AD307,
//			0x95E9E475, 0x924FAAD3, 0x8ECB9A75, 0x8B5D2B07, 0x8803D777, 0x84BF1DEF, 0x818E7FAF, 0xFA0DEED9,
//			0xF43F3741, 0xEE93070D, 0xE90890F1, 0xE39F0C67, 0xDE55B58F, 0xD92BCD17, 0xCF336023, 0xCA6372CF,
//			0xC5B021FF, 0xAFC6001D, 0xA00117CF, 0x9C49C697, 0x98A88D81, 0x951CE92D, 0x8AF6847D, 0x87BC4D8D,
//			0x8180FE8F, 0xFA3F486F, 0xF49FA91F, 0xE9C0BDF5, 0xE4800215, 0xDF5D7E31, 0xDA588471, 0xD0A48B75,
//			0xC75EF4F3, 0xBA3AE02B, 0xB60B8819, 0xB1F44341, 0xADF48725, 0xAA0BCC5F, 0xA6398E99, 0xA27D4C75,
//			0x9ED6877B, 0x9B44C40B, 0x97C7894D, 0x945E6123, 0x9108D811, 0x8DC67D37, 0x8A96E23D, 0x87799B49,
//			0xFA6D85BD, 0xF4FA1811, 0xEFA509F9, 0xEA6DB233, 0xE5536B35, 0xDB738B33, 0xD6ACB8C9, 0xCD6E58F9,
//			0xC8F5A633, 0xC495DDE1, 0xC04E7531, 0xBC1EE451, 0xB806A665, 0xB01A1E63, 0xAC44D8CD, 0xA884EF07,
//			0xA4D9EA11, 0x9A51B865, 0x9075C7D5, 0x873B1719, 0x84498F5D, 0x81686E6F, 0xFA98EFEF, 0xF54F0FFD,
//			0xEB106D05, 0xE61A7887, 0xDC7E65E5, 0xD7D72935, 0xD349104B, 0xCED39351, 0xCA762D55, 0xC201A07F,
//			0xB9E77939, 0xB5FB1C0D, 0xB223F10D, 0xA01EB619, 0x9CBDA623, 0x996ED7BF, 0x9631E84F, 0x8FEC261B,
//			0x8CE29851, 0x87005E7F, 0x815D0BFB, 0xFAC1E365, 0xF59F42F9, 0xF0978EA7, 0xEBAA3947, 0xE6D6B899,
//			0xDD7B1A6B, 0xD8F1F657, 0xD48099B1, 0xD02687CD, 0xCBE3468F, 0xBF9DC6D1, 0xBBB1344F, 0xB7D93465,
//			0xB4155B3B, 0xB0653F27, 0xACC878AF, 0xA93EA279, 0xA5C75937, 0xA2623BAB, 0x9F0EEA91, 0x9BCD089B,
//			0x989C3A5F, 0x957C2657, 0x926C74D1, 0x8C7CE379, 0x84084133, 0x81540F2D, 0xF5EA757B, 0xF1061383,
//			0xEC3A9B97, 0xE7878ED5, 0xE2EC70E1, 0xDE68C7D9, 0xD9FC1C49, 0xD5A5F919, 0xD165EB8B, 0xCD3B8325,
//			0xC92651AD, 0xC139E57F, 0xBD61D91F, 0xB5EC1723, 0xB24D9C1F, 0xAEC18F6D, 0xAB47932D, 0xA7DF4B61,
//			0xA4885DE1, 0xA1427249, 0x9E0D31FF, 0x9AE8481D, 0x97D3616F, 0x94CE2C6B, 0x91D85923, 0x8C199FFD,
//			0x89502219, 0x8694D5D3, 0x8147B271, 0xFB0C904D, 0xECC37005, 0xE3B1B659, 0xDF4A6A77, 0xD6BCCE3D,
//			0xC699FDE9, 0xBEFE7C61, 0xB7AD9447, 0xB420340D, 0xB0A46A15, 0xAD39DF49, 0xA9E03E49, 0xA6973357,
//			0xA35E6C53, 0x9A129165, 0x9717C447, 0x942BB7B9, 0x914E22B5, 0x8E7EBD99, 0x83C99FAF, 0x813D274D,
//			0xF1D08AF9, 0xED43566B, 0xE8CC107F, 0xDBE5BFB7, 0xD7C22743, 0xD3B28091, 0xC433F035, 0xC0828467,
//			0xBCE2E433, 0xB954B9D7, 0xB5D7B133, 0xB26B77B9, 0xAF0FBC67, 0xABC42FC9, 0xA55C6C2F, 0x9F31CE91,
//			0x99420F2B, 0x965F9259, 0x88BE7A7B, 0x862B90A5, 0x83A50DD7, 0xFB50D045, 0xF6B791E9, 0xE96B8497,
//			0xE5261A7F, 0xE0F4B24F, 0xDCD6EE4F, 0xD8CC727B, 0xD0EFEBB9, 0xCD1D3113, 0xC95C5F1B, 0xC5AD21EF,
//			0xC20F2731, 0xBE821E09, 0xBB05B719, 0xB0F14B83, 0xADB47065, 0xAA86BFE7, 0xA457C3ED, 0xA155EE39,
//			0x9E622EAD, 0x9B7C434D, 0x98A3EB51, 0x95D8E71F, 0x9069E18D, 0x8DC566B9, 0x8B2D4CBD, 0x83AD0557,
//			0x8144356D, 0xFB6D5599, 0xF6EF948D, 0xEE3151B7, 0xE5C24EC9, 0xDD9FBD6F, 0xD9AA45DB, 0xD5C6E8C7,
//			0xD1F55367, 0xCE35346F, 0xCA863C03, 0xC6E81BB7, 0xBFDD30C1, 0xBC6FD021, 0xB9121BAF, 0xB5C3CBBD,
//		};
			// this is what 1.6.0 used.
			//97 problem multipliers in total, 415 likely good multipliers in total.
			//Lowest collisions : 5267486
			//Highest collisions: 5749688
			//Lowest pileup     : 16
			//Highest pileup    : 78
//			new int[]{
//				0x30997D75, 0x419F6AE3, 0x7FC6F5F3, 0xD33C4C3D, 0xEEDAD501, 0x158D36F9, 0x4912D2B7, 0xA27A0E77,
//				0x5A8AB569, 0xF7914C3D, 0x9B56CC3D, 0x0A4348A3, 0x47C2F571, 0xB4A9C255, 0xE0EDF571, 0x260DFD75,
//				0xBF0B1E47, 0xC55254FF, 0x802F52B7, 0x16150E77, 0xFE2C5205, 0x6EAB7D75, 0xB7F7D5EB, 0x2E15EAE3,
//				0x111A4987, 0xFB412207, 0x3262E173, 0x9EBFA119, 0x78DA7B2F, 0xCA116CE9, 0xE8A214D9, 0x456B85C7,
//				0xDB8CC255, 0x37702DC3, 0x60820427, 0xA361A649, 0x2F4D7B2F, 0x45B0D2B7, 0x2BE694D9, 0xAE9865D5,
//				0x90273B83, 0x2224D4FF, 0xE798EAE3, 0xE6D3F5F3, 0x9356E5D5, 0xD04765D5, 0x6243B6F9, 0x8FCAD4FF,
//				0x68AB8E77, 0xD680D339, 0x44A5ADC3, 0x80914C17, 0xE43FE173, 0xDF31ADC3, 0x5D8BC057, 0x987A52B7,
//				0x9CF30427, 0x2B165205, 0x22DFBCA7, 0xF70EFB2F, 0x3DEBD4FF, 0x07AB55EB, 0x2A61B569, 0xA32B7D75,
//				0xE1DCA649, 0x02F63713, 0x52DAD501, 0xC7ADB569, 0xAB818427, 0x1F675501, 0x4FCC3B83, 0xEEEEFB2F,
//				0x77CB4987, 0xBC9265D5, 0x3EE914D9, 0x77F854FF, 0xB3E7C8D7, 0x89D4D5EB, 0x37487571, 0xC2C2AA37,
//				0xFE3714D9, 0xBEC16173, 0xD9C8D2B7, 0x0212BB83, 0xEFBF7BB3, 0xEAC3A119, 0x18C2C8D7, 0xCE48C057,
//				0x7C41E8E7, 0x35C65205, 0xAFE24057, 0x3D5C14D9, 0x06F0C8A3, 0x1D06F6F7, 0x9C5E0E77, 0x72CB7D75,
//				0x4E582649, 0x41E13713, 0xC5A1F5F3, 0x1F36CC17, 0x774BB569, 0xC31ACC17, 0xB0B1FBB3, 0x2E20F6F7,
//				0x2156FD75, 0xBE5BAA37, 0x7935B713, 0xDC8F2207, 0x5852A649, 0x448F5501, 0xFD250415, 0x46A9D501,
//				0x5161CC17, 0x491AA649, 0xCB02C8A3, 0x8EDD1E47, 0x8130ECE9, 0x895548A3, 0xCB8D7D75, 0x2B6DADC3,
//				0x7B814C3D, 0x6912C987, 0x2A08C4BF, 0x1D484057, 0x224750DB, 0x939F7BB3, 0x7F19D0DB, 0x671B7571,
//				0x9D1D2DC3, 0x50D5EAE3, 0x33953569, 0xF3B365D5, 0xB88C1E47, 0x0FE6B569, 0xC7CDEA89, 0xE1F5D205,
//				0x908CD501, 0x52E0C2E5, 0xC3B05339, 0x245D42E5, 0xD3BFC057, 0x648568E7, 0x002F2649, 0x37CB0415,
//				0x8778CC17, 0xD80D48A3, 0xB16052B7, 0xACEDD501, 0x94E9D0DB, 0xE9260415, 0x8AE43B83, 0x691848D7,
//				0xDFE7F6F7, 0xE874C987, 0x7BD6CD59, 0xAF05BCA7, 0x01938427, 0xBE624987, 0xF3DA8427, 0xB43C42E5,
//				0x5E4B0427, 0x37A35339, 0xAAAA6173, 0x335BCC3D, 0xD6CD4EC9, 0x5E2E94D9, 0x549A4C3D, 0x005D65D5,
//				0x99B8E8E7, 0x3F5D5205, 0x050FEAE3, 0x5CC98427, 0x67CFD5EB, 0x6E4B85C7, 0x16A0E173, 0xA4B7E5D5,
//				0x85ED2119, 0xA999A207, 0x241955EB, 0x2CBF2207, 0xD7610427, 0xC85DFD75, 0x9C104D59, 0x7032B713,
//				0xA95FE8E7, 0x337EF6F7, 0x74104C17, 0x9099C057, 0x11568415, 0x359A48D7, 0x2191A649, 0xB87BA207,
//				0x684DAA37, 0xA9F355EB, 0x51CDC057, 0xEB2952B7, 0xF6F5AA37, 0xFD7F9497, 0x4C3C52B7, 0xF2DF85C7,
//				0x4443C8A3, 0x44CCE5D5, 0x49F854FF, 0x47EFB713, 0xF0D02DC3, 0xEC437B2F, 0x7680EA89, 0x121BD0DB,
//				0xC3ECC057, 0x0C0AF571, 0xD5312DC3, 0xAFF4C4BF, 0xA6DF2207, 0xDB062A37, 0x633DC8A3, 0x34C1D205,
//				0x36CB48A3, 0xACE84987, 0x9A7DE173, 0xE05950DB, 0x0412F571, 0x5C276AE3, 0xB705D5EB, 0xC1C93B83,
//				0xB6864C3D, 0x2079B6F9, 0xB62FD2B7, 0x92B35501, 0xFED442E5, 0xB3ACD205, 0xC4EEA649, 0xB44F8427,
//				0xE6A014D9, 0x8FD3F5F3, 0x291155EB, 0x51EB9497, 0x99694EC9, 0x7DB594D9, 0xA1627D75, 0x6A1EE5D5,
//				0xD7442119, 0x0801AA37, 0x0D6A4987, 0x55AF5205, 0x511C5501, 0x452C9497, 0x355BC2E5, 0x878C55EB,
//				0x464FD4FF, 0xCBAB6AE3, 0x0E33B6F9, 0x4FA848A3, 0xE0C22207, 0x20C84C17, 0x7DC0CC3D, 0x2E3FC057,
//				0xE75D52B7, 0x53D14D59, 0x6EDACEC9, 0xD7E47B2F, 0xDDCA2119, 0x44851E47, 0xE24C1E47, 0x036C48D7,
//				0xB1D3FD75, 0x007055EB, 0xD32AF571, 0x3E1CD205, 0x3A527BB3, 0xB7F6B569, 0x76B2BCA7, 0x8135ADC3,
//				0x071A8415, 0x3B48FBB3, 0x5F89ECE9, 0xD4CA42E5, 0x80FF3713, 0xE0930E77, 0xD8538427, 0x7DC05339,
//				0xEEE1ADC3, 0xD7750427, 0x5B79EA89, 0x22A3A649, 0xBB9E1497, 0xDFEBCC17, 0x1E4CD0DB, 0x334B4255,
//				0xFFEFD4FF, 0xB979FB2F, 0xB19DD2B7, 0x0D6AD0DB, 0x43AEAA37, 0x23346173, 0xD9372119, 0x694952B7,
//				0x88BDA207, 0xE3686173, 0x3BB5ADC3, 0xA7E3D501, 0x3DFB85C7, 0x25368415, 0x5401CC17, 0x74AE85C7,
//				0x54844057, 0xE9D4E8E7, 0x2B8FFB2F, 0x67EAC987, 0xEB5A2119, 0x68E21497, 0xC6244255, 0xE3278427,
//				0x448C52B7, 0xAA274EC9, 0xCAF64987, 0x14A4ECE9, 0xB2BD2207, 0x0DF2CC3D, 0x90F92207, 0x47C6CC3D,
//				0xA7503713, 0xA5B34C3D, 0xFB5A0E77, 0xAACE3569, 0x3894C057, 0x4E51E173, 0xC5382A37, 0x6FD9C987,
//				0xA0B97B2F, 0x73D95501, 0xD49DC987, 0xC22AF5F3, 0xF910FBB3, 0xF93905C7, 0xD9077571, 0x17AFF6F7,
//				0xB4A314D9, 0xA945E8E7, 0x0A345501, 0x4237CEC9, 0xA837D205, 0x02CF85C7, 0x289F4EC9, 0x07F876F7,
//				0xA65DCEC9, 0xEF87C987, 0x694942E5, 0xF02BF571, 0xDB8442E5, 0x694E50DB, 0x261344BF, 0x38708E77,
//				0x7E9AB713, 0xC8034987, 0x97580427, 0x2EC585C7, 0x10A2B6F9, 0x06E8F571, 0xE5C24EC9, 0xDDDFCDD1,
//				0x53014DD1, 0xDA1FC7FB, 0xE17B136F, 0x9B89C7FB, 0x34D10B4F, 0x5996D71B, 0x35C9CDD1, 0xB910CDD1,
//				0x572F0B4F, 0xA9B2C7FB, 0x2EB88B4F, 0x680547FB, 0xFFFAC7FB, 0x0EE647FB, 0x6878936F, 0xBA28CDD1,
//				0x2F54936F, 0x3970CDD1, 0x0F39136F, 0x5EC7936F, 0xC5BDC7FB, 0x05F4571B, 0x078E936F, 0xF904936F,
//				0xCD9B0B4F, 0x71DDD71B, 0xF791CDD1, 0xDAD5C7FB, 0xB32C4DD1, 0x1444571B, 0x32BAC7FB, 0xD713571B,
//				0xF96E4DD1, 0x27948B4F, 0xCAE9CDD1, 0x90FD136F, 0xC4EC8B4F, 0x6061571B, 0xC9FE136F, 0x501C571B,
//				0x5CC747FB, 0x8ECCC7FB, 0x3614548F, 0x54BA2AA9, 0x3FB18A27, 0xD7101A2D, 0x2E2514C9, 0x61DEF7C7,
//				0xCB564ED1, 0x153A0EB9, 0x87BE0CAF, 0xF89FC43F, 0xBCAC00F5, 0xCD2F77C7, 0xE44CD0CD, 0x9A8A14D1,
//				0x3572EAF1, 0xF906CAB9, 0xC24C98E1, 0xB0C11663, 0x1085CBF3, 0x3C5AB53D, 0x23F37C2F, 0xC3F438A1,
//				0x1C0F5DB3, 0x6B1CE795, 0x409A741B, 0x1A7AE9E7, 0x737040CF, 0xFD1D7E5D, 0x14481CB1, 0xBF4B6F35,
//				0x6DA4A781, 0xAD6EBF25, 0x76595695, 0xAE1BCB61, 0x6D7DF667, 0x33098BD7, 0x83D0AC31, 0xE6BEF46B,
//				0x579DF7C7, 0x7F80E53B, 0x977D0A5D, 0x4B10F71F, 0xA7CF0475, 0xCEDF10DF, 0xAB739CEB, 0xA8702733,
//				0xCDB7D14F, 0x6C41409D, 0xB907D7F3, 0x6831357D, 0x7FFBF855, 0x39A937AD, 0x4B3470FD, 0xFF6B3DE1,
//				0x175C9C89, 0xC527A781, 0xFC18E671, 0x77622A4F, 0x2F88548F, 0xC54D38A1, 0x31EE00C9, 0x08428D31,
//				0x191D66FF, 0x7C639F61, 0x1E8BFDE7, 0x2990F17B, 0xB9023DE1, 0x85D64B83, 0xD7EEDD93, 0x48738D13,
//				0xEE72765B, 0x88F9D823, 0xC807AB3F, 0x6D79C7D7, 0xEDC8773B, 0x13D2CC4F, 0xB106CAB9, 0x21E6E53B,
//				0xCA031FAD, 0x9A69443F, 0xA175E81D, 0xC6E439B5, 0xC3AB35F7, 0x62579D2F, 0xA8D9A733, 0x25014BA7,
//				0x12B8FC4F, 0xB8FD40FB, 0xDB00286B, 0x509D653D, 0x5D157861, 0x6CB38B11, 0xA732BD63, 0x9FF6AC31,
//				0x74DF6795, 0x7E622BC5, 0xC8D66795, 0x0872548F, 0x92EAF8A9, 0x1E15B873, 0xE257746B, 0x5A4A2AA9,
//				0xE0A88A73, 0xC5D4AC31, 0x54231F61, 0x4DF0653B, 0x836E5D93, 0x335514D1, 0x759A66F1, 0x925A3D49,
//			};

			// being evaluated for 1.6.2
			//6 problem multipliers in total, 506 likely good multipliers in total.
			//Lowest collisions : 5212354
			//Highest collisions: 5784763
			//Lowest pileup     : 16
			//Highest pileup    : 23
			//
			// the 6 problems are:
			//0xFCAE655D, 0xB5575A83, 0xFEF342EF, 0x816DD903, 0xFE09F15F, 0xFCEF1725
//		new int[]{
//				0xE6AC8B4F, 0xC21736F9, 0xFD890F79, 0xC514D823, 0xF151575F, 0x8BDCE3EF, 0xA7F27B2F, 0x8C1EAA4F,
//				0xCCE4C43F, 0x82E28415, 0xC6A39455, 0xE6245E51, 0xC33AFB2F, 0xBFA927CB, 0xAC11C8A3, 0xC00E6AF1,
//				0xF01DF9A5, 0x9E7300F5, 0xA7E675F3, 0xFE3FB283, 0xE0FF1497, 0xB2CE9603, 0xD9EF3FCD, 0xB7F3D71B,
//				0xE438BEA9, 0xF16A6DCD, 0xA4613217, 0xAAE7C54B, 0xB56A208B, 0xBCA43B89, 0xEBE28BC7, 0x8567101B,
//				0xCD722469, 0xC3D56C8B, 0xEC34F7A1, 0xBF6C9497, 0xAE7244F5, 0xF3DEC4BF, 0xB79FD4FF, 0xFF54D7E7,
//				0xEE99B50F, 0xB965E897, 0xE37B5231, 0xF9FBF639, 0x965B209B, 0xFB164EC9, 0xE33667EF, 0x808498B7,
//				0x8E4EA9ED, 0xDB6B35F7, 0x9DCAF41B, 0xC2EEC5D5, 0xBBEB6F4F, 0x9645256D, 0x9BE82D2B, 0xC7C8533D,
//				0x8FA69905, 0xE4F8CD59, 0xAFDBF6C1, 0xC17E533D, 0x80922B93, 0xF40F52B7, 0xB824EF5F, 0x8EFBF295,
//				0xA495DEA3, 0xBF03ABE5, 0xFCE635CB, 0xB4422C7D, 0xCB39CDBD, 0xB370E565, 0x8701C045, 0xCD01F09F,
//				0xEA326ABB, 0x8DB96BBD, 0x97D3EA41, 0xE4B3EBB9, 0x8DCBB01B, 0xF3EDEDDD, 0xE018F82D, 0xE609C2E5,
//				0x8099F855, 0xCBC5273F, 0x978BDC1D, 0xEDEAD625, 0xB784AF47, 0x8C4C960F, 0xDC0CFB0D, 0xFCB95601,
//				0xA25AF703, 0xE0F6C62B, 0xB9229497, 0x80B41AB9, 0xCEA1EDDB, 0xB5A7B713, 0xC7AA1AE7, 0xED81746B,
//				0x83A0FC83, 0xD689CA89, 0xECE5E5D5, 0xC1CB8BEB, 0xF1D565C9, 0xC1ADCC9D, 0xB2985335, 0xF28FB701,
//				0xE8F1FBCF, 0xC8E7F03D, 0xF3AEC9B5, 0xCF030129, 0xB84DA7F3, 0x94A32A2B, 0xEB1A2609, 0xA1E0543F,
//				0xFAAD5D75, 0x9ED5A1E3, 0xBA56FE47, 0xFAB9E45B, 0x94DFAC1B, 0xC0A7D057, 0xC4E985F9, 0xA8612159,
//				0xE35C86ED, 0xFA0C22AB, 0xE607294F, 0xCC11653B, 0xFAD1EED3, 0xA49D3AFF, 0xB7D7B6B1, 0xC0A8E4EF,
//				0xCC8965C7, 0xA562FE85, 0xEE138EB9, 0xF0EE34C7, 0xEE739611, 0xFE191A7D, 0xCBBEE81D, 0xD0DE6BBD,
//				0xF6D38D31, 0x9F620FFD, 0x82E63243, 0xF4A1FFF3, 0xAD1185C7, 0xFCAE655D, 0x83B2BF37, 0xADE3D033,
//				0x9C2759F5, 0xA856B25F, 0xB1BEB50F, 0xCED724B3, 0xD68F0657, 0xC862D5DD, 0xACABAFB3, 0x9E01B893,
//				0x98FB4B61, 0x87D6B58B, 0xCE42682D, 0xC8FF67C7, 0x8F531893, 0xCFB5FEA7, 0x83D18A7B, 0xB07D3A2D,
//				0x8AE04AAD, 0xAC226E1D, 0x966E5FAB, 0xD241CD23, 0x84487F11, 0xA5DE22F3, 0xE2061CD3, 0xBE5B9F0B,
//				0xC88E2807, 0x8AEDE62B, 0x9A5DA973, 0xC1188E6D, 0xD08851B5, 0xA979EC49, 0xA26FD4F7, 0xFC92BDFB,
//				0xFF544D9B, 0x8D32BB1B, 0xCF2CB46F, 0xBCBECE53, 0xCF26F6F7, 0xE3C1B8CF, 0x92648319, 0xC29E60A3,
//				0x880E8E9B, 0xD7336DA5, 0xDF391243, 0xA2945DB3, 0xB943F971, 0x8009F5F3, 0x844BAB95, 0x8C515033,
//				0x8F009B75, 0x93A815E7, 0xC465778F, 0x9425DC8D, 0xCA564247, 0xDF3909A1, 0xC788231F, 0x854066D1,
//				0xAAA0CBBF, 0xF4E86F33, 0xD1D3B9E7, 0xE81D90D5, 0xFB9F0613, 0xCD3E83D3, 0xC3A1CBF5, 0xD4D8A629,
//				0xE935C8D7, 0xBF8F0567, 0x93912007, 0xCE810209, 0x8E0CE38D, 0xA898701D, 0xE6B6789F, 0x901BFFFB,
//				0xCA0A9FDB, 0xFC8F186F, 0xA8A4FFA5, 0xEA393429, 0xEF3AF87B, 0xB80947FD, 0xC2D190D3, 0xA8DBCCBF,
//				0x95B94A41, 0xD2403F83, 0xD3A1919F, 0x81668DEB, 0xEBA70489, 0xD0CDB4FF, 0xD81FD1D3, 0xB302C987,
//				0xABB672CD, 0x9E55CBF3, 0xCF5B331D, 0xA8FA9803, 0x8BD6AD6F, 0xD0ED94DB, 0xC3BCF1AD, 0xC30969E3,
//				0x8C2A253F, 0x88663643, 0xB8580E4B, 0x83657DE7, 0xE4E04137, 0xF9E0C7DF, 0xA68C7791, 0xC17DC8F1,
//				0xC9247ACF, 0xDC8DEE37, 0xA88A6439, 0x95E6BCF9, 0xDE0184B1, 0xE881C805, 0xCEA405C7, 0x9A3AB6F9,
//				0xE2C5A9D9, 0xC9FB76BD, 0xDA6C84C9, 0xB76FD153, 0xF3A9039B, 0xA49668EF, 0xE09F978B, 0xF701704F,
//				0xE39ECEF7, 0xEDD14F51, 0xB1E0228B, 0xE78D0427, 0x9438B3D9, 0xB5CE57BB, 0xABFBDEB9, 0x9CEC22C9,
//				0x8E2ED2B3, 0xB3A06767, 0xC179176F, 0x8605B14F, 0xD30A3B83, 0xDD8A7ED7, 0xB68E5DC9, 0xA00EC5B7,
//				0xB57AD749, 0xA0148BD1, 0xEB8D7DB5, 0xB5575A83, 0x8CE7A2FB, 0xA8D481A7, 0xF54EBE4F, 0xDFBF3899,
//				0xF458E5D9, 0x950540CD, 0xF13D03B7, 0xABDF22BF, 0xEF226C59, 0xACA4EEE7, 0x9D9532F7, 0xDB65787F,
//				0x86F7E439, 0xA3AA8F0D, 0xEFBF06E5, 0xCC448CC9, 0x95C66415, 0xACBE0555, 0xCC211003, 0xE72A6339,
//				0xCFCBE891, 0xFDA3293B, 0xDB41FBB9, 0xE86CE16F, 0xA94D8587, 0xA6D2E6D1, 0xCA179FC9, 0xDC9D87BB,
//				0xC14D4C3D, 0xF58C4C35, 0xFEF342EF, 0xB30ECEC3, 0xC4B12B3F, 0xE72A5A97, 0xF8CCB713, 0xF2406667,
//				0xA8FFC28D, 0x83887061, 0xCD0A47AD, 0xB672ADC5, 0xFAFF47A5, 0xA85E7F21, 0x816DD903, 0xCAA1ED55,
//				0x888A3D55, 0xCCFED55F, 0xA3F9555B, 0x93A04925, 0xC905253F, 0xAF7525FB, 0xC427E9A9, 0xA69E3A45,
//				0xEC6794E3, 0xFE09F15F, 0xAF2D17D7, 0xE0503E4F, 0xA9D2159B, 0xC38C5B13, 0x818CA447, 0xD510F841,
//				0xDEE379E5, 0xB9D1EC89, 0xF45C09BB, 0xA1858013, 0xE4B0C7D7, 0xC9A1B729, 0xF8B003BB, 0x9681B8A1,
//				0xC028736F, 0xA72E3CA7, 0xD20D17F5, 0xF1BDE59D, 0x981305C7, 0xD7AA623B, 0xF57C1721, 0xEE71FFCF,
//				0xD7FDEB4F, 0xFD6F8003, 0xB7C99989, 0xA50DF073, 0x87D20409, 0xC0950A4F, 0xD4944633, 0xF3AF4B5F,
//				0xB6570663, 0xDA7F4AD1, 0xBD0D9D43, 0xBE86F135, 0x95FF37D7, 0xBB230991, 0xCEA47ECF, 0xE87C8395,
//				0xA6E74BBD, 0xAE396891, 0x9097B757, 0xC8DCF6F7, 0x82E94D83, 0xB1A9D71B, 0xAC36D309, 0x8A6B6E03,
//				0x810B3815, 0xE1EA7571, 0xAFAE025F, 0xDBC3E995, 0x95B83E4B, 0xE6C1F38F, 0xD6E6ADFF, 0x86C08431,
//				0xCD48F2CD, 0xD8ACC197, 0x8EEF6BAF, 0xF201423F, 0xEF20DEB9, 0xF3E05B01, 0xC1A3E7EF, 0xD5732027,
//				0xAA4D42AB, 0xD5FD6511, 0xC9B04D59, 0x86798AA5, 0xFEF1ACAD, 0xC29ABB17, 0xF8655C01, 0x8BB6CD93,
//				0xF7CE9031, 0xBDBC7C2D, 0xCBFAF105, 0xA3557859, 0xF6D9CC53, 0xEFCFB501, 0x99D0C251, 0xD687BB3F,
//				0xFCEF1725, 0xD3360F57, 0x853CC145, 0xAE0C8025, 0xC02CA347, 0xBFDEE04D, 0xC2A18485, 0xD58D3147,
//				0xEC1E0A63, 0xD568B12D, 0x8F7507B9, 0xE0FC83A3, 0xE9E5B3B7, 0xA9B2D14F, 0xC7010217, 0xBF135F4F,
//				0xD6053A75, 0xA034DC13, 0xF6B19569, 0xE4C175F3, 0xAA43DFA7, 0xAD3C4503, 0x9131A709, 0x8D6DB80D,
//				0xD40E287F, 0xA1D1B56D, 0x99C65357, 0xBE1E9B71, 0x9268BB93, 0xAC58C22F, 0x92C8C2EB, 0xA3E79B49,
//				0xA0A16A51, 0xF3D7FB51, 0x91D9B3E3, 0xB51E6CDB, 0x94D2193F, 0xACCB0543, 0xC73E8FFD, 0x86A5E8C5,
//				0x9A62E541, 0xDE89BA51, 0xF831BB6B, 0x94545B3B, 0x94EA23B7, 0xC6BB1481, 0x967B797F, 0xE701AAA5,
//				0x92D5412F, 0xFAA69407, 0xD3927123, 0xFEDCCEB9, 0xDCF967DD, 0xE779AB31, 0xEF318CD5, 0x8AEE67D5,
//				0xDF2C09B3, 0xAE50E8BD, 0x996863EB, 0x8F182443, 0x829B08DF, 0xDDBF3CA7, 0xA01EFACB, 0xEA9C5F63,
//				0xEEFBCBB1, 0x85AB676F, 0x902BAAC3, 0x9B59B869, 0xD54E0D1F, 0x98F71B89, 0xFE7DD357, 0xC8E33619,
//				0xB483FB7F, 0xEE90520B, 0xC8D0FA5D, 0xCD12AFFF, 0xDDE982DB, 0x8426A12F, 0x911BC5C1, 0x8F36EF87,
//				0xFF7960A3, 0xADA421BF, 0x9EAC67A5, 0x89C3E2D3, 0x85B230DD, 0x8BBAFD6B, 0xEC04724B, 0xC7F42FB3,
//				0xC859FD25, 0xFDA6D769, 0xA4AF7F5D, 0xD0C56693, 0xB40740CF, 0xE8A09349, 0x9FB48479, 0xF80A9919,
//		};

			// The best candidate so far for 1.6.2 . This uses the same switching as the two before.
			//0 problem multipliers in total, 512 likely good multipliers in total.
			//Lowest collisions : 5212430
			//Highest collisions: 5226076
			//Lowest pileup     : 16
			//Highest pileup    : 16
//			new int[]{ //0xEFAA28F1 should be the initial multiplier
//				0xEC6794E3,
//				0x9B89CD59, 0xDCA1C8D7, 0xC5F768E7, 0x92317571, 0x937CD501, 0xE993C987, 0xD5567571, 0x85C8ADB5,
//				0xE6AC8B4F, 0xC21736F9, 0xFD890F79, 0xC514D823, 0xF151575F, 0x8BDCE3EF, 0xA7F27B2F, 0x8C1EAA4F,
//				0xCCE4C43F, 0x82E28415, 0xC6A39455, 0xE6245E51, 0xC33AFB2F, 0xBFA927CB, 0xAC11C8A3, 0xC00E6AF1,
//				0xF98DDA5B, 0x8FA1F025, 0xF0CFFC71, 0xA49DC54B, 0xB3A7C3C3, 0xC2F9C7BD, 0xE0CC8899, 0xB3B0A51D,
//				0xF01DF9A5, 0x9E7300F5, 0xA7E675F3, 0xFE3FB283, 0xE0FF1497, 0xB2CE9603, 0xD9EF3FCD, 0xB7F3D71B,
//				0xE438BEA9, 0xF16A6DCD, 0xA4613217, 0xAAE7C54B, 0xB56A208B, 0xBCA43B89, 0xEBE28BC7, 0x8567101B,
//				0x9F45E6F1, 0xF95D5505, 0xCDCBFDE3, 0xECFA5363, 0xB449917B, 0xE1D8CCA3, 0xE208D04F, 0xC0A33019,
//				0xCD722469, 0xC3D56C8B, 0xEC34F7A1, 0xBF6C9497, 0xAE7244F5, 0xF3DEC4BF, 0xB79FD4FF, 0xFF54D7E7,
//				0xEE99B50F, 0xB965E897, 0xE37B5231, 0xF9FBF639, 0x965B209B, 0xFB164EC9, 0xE33667EF, 0x808498B7,
//				0xFFD4C7BD, 0xCF6740FB, 0x98EFE1B5, 0xA5CCFBCF, 0xB268E277, 0xFF48E3EF, 0xAB8ECED1, 0x83B4DFC5,
//				0x8E4EA9ED, 0xDB6B35F7, 0x9DCAF41B, 0xC2EEC5D5, 0xBBEB6F4F, 0x9645256D, 0x9BE82D2B, 0xC7C8533D,
//				0x8FA69905, 0xE4F8CD59, 0xAFDBF6C1, 0xC17E533D, 0x80922B93, 0xF40F52B7, 0xB824EF5F, 0x8EFBF295,
//				0xFA482B93, 0x8492ADC3, 0xBCBA2E15, 0xD6F7F7AB, 0x80A58489, 0xB867400B, 0xD5D33021, 0xF43AAD83,
//				0xA495DEA3, 0xBF03ABE5, 0xFCE635CB, 0xB4422C7D, 0xCB39CDBD, 0xB370E565, 0x8701C045, 0xCD01F09F,
//				0xEA326ABB, 0x8DB96BBD, 0x97D3EA41, 0xE4B3EBB9, 0xA9D2159B, 0xF3EDEDDD, 0xE018F82D, 0xE609C2E5,
//				0xFE852FB3, 0xC2107ECF, 0xD42AE479, 0x9E128095, 0xF38831AF, 0xAF439D51, 0x87FF76C1, 0xD48BF7C7,
//				0x8099F855, 0xCBC5273F, 0x978BDC1D, 0xEDEAD625, 0xB784AF47, 0x8C4C960F, 0xDC0CFB0D, 0xFCB95601,
//				0xA25AF703, 0xE0F6C62B, 0xB9229497, 0x80B41AB9, 0xCEA1EDDB, 0xB5A7B713, 0xC7AA1AE7, 0xED81746B,
//				0xAB08B11D, 0x8F63D7F3, 0x8FABDD75, 0x8F405B2D, 0xDD51AB15, 0xD7131D63, 0xFCC13CA9, 0xE7D8B7D7,
//				0x83A0FC83, 0xD689CA89, 0xECE5E5D5, 0xC1CB8BEB, 0xF1D565C9, 0xC1ADCC9D, 0xB2985335, 0xF28FB701,
//				0xE8F1FBCF, 0xC8E7F03D, 0xF3AEC9B5, 0xCF030129, 0xB84DA7F3, 0x94A32A2B, 0xEB1A2609, 0xA1E0543F,
//				0xFF96253F, 0x87604B41, 0xA1FE1C2F, 0xD5FBE8B5, 0xF0707F65, 0xE81D17CD, 0x9D3430ED, 0xF44D7C2D,
//				0xFAAD5D75, 0x9ED5A1E3, 0xBA56FE47, 0xFAB9E45B, 0x94DFAC1B, 0xC0A7D057, 0xC4E985F9, 0xA8612159,
//				0xE35C86ED, 0xFA0C22AB, 0xE607294F, 0xCC11653B, 0xFAD1EED3, 0xA49D3AFF, 0xB7D7B6B1, 0xC0A8E4EF,
//				0xAF255C59, 0xF101965F, 0xBA7DB033, 0x9AC1679B, 0xC1831603, 0xE6F4AAB7, 0x8DC1D40F, 0xC076504F,
//				0xCC8965C7, 0xA562FE85, 0xEE138EB9, 0xF0EE34C7, 0xEE739611, 0xFE191A7D, 0xCBBEE81D, 0xD0DE6BBD,
//				0xF6D38D31, 0x9F620FFD, 0x82E63243, 0xF4A1FFF3, 0xAD1185C7, 0x83B2BF37, 0xADE3D033, 0xD568B12D,
//				0x927B92DF, 0xF664655D, 0x9CB98587, 0x825DFCA3, 0xD5AC8F79, 0xC79860D5, 0xD063D19B, 0xDE0C7DF7,
//				0x9C2759F5, 0xA856B25F, 0xB1BEB50F, 0xCED724B3, 0xD68F0657, 0xC862D5DD, 0xACABAFB3, 0x9E01B893,
//				0x98FB4B61, 0x87D6B58B, 0xCE42682D, 0xC8FF67C7, 0x8F531893, 0xCFB5FEA7, 0x83D18A7B, 0xB07D3A2D,
//				0xB423727D, 0xAA333A2D, 0x978F92ED, 0x830CD2EB, 0xA5EBC713, 0xD3C8C535, 0xDAE520E5, 0xCC356C4D,
//				0x8AE04AAD, 0xAC226E1D, 0x966E5FAB, 0xD241CD23, 0x84487F11, 0xA5DE22F3, 0xE2061CD3, 0xBE5B9F0B,
//				0xC88E2807, 0x8AEDE62B, 0xAF2D17D7, 0xC1188E6D, 0xD08851B5, 0xA979EC49, 0xA26FD4F7, 0xFC92BDFB,
//				0xFB73BC8B, 0xB26FABE5, 0xC2F8BBC7, 0xC5AA2797, 0xB5511B61, 0x8BCDD4B7, 0xC4431803, 0x853BC693,
//				0xFF544D9B, 0x8D32BB1B, 0xCF2CB46F, 0xBCBECE53, 0xCF26F6F7, 0xE3C1B8CF, 0x92648319, 0xC29E60A3,
//				0x880E8E9B, 0xD7336DA5, 0xDF391243, 0xA2945DB3, 0xB943F971, 0x8009F5F3, 0x844BAB95, 0x8C515033,
//				0x9296AFF5, 0xA9288C65, 0xA0B1A807, 0xB725C529, 0xA36E8EC7, 0xA59B6A83, 0xB1173B23, 0x91F6787F,
//				0x8F009B75, 0x93A815E7, 0xC465778F, 0x9425DC8D, 0xCA564247, 0xDF3909A1, 0xC788231F, 0x854066D1,
//				0xAAA0CBBF, 0xF4E86F33, 0xD1D3B9E7, 0xE81D90D5, 0xFB9F0613, 0xCD3E83D3, 0xC3A1CBF5, 0xD4D8A629,
//				0xB1A74627, 0x9DF00FC5, 0xC7559721, 0xAA19AAB7, 0xF0A31CA7, 0xBD355B25, 0xA3A55BE1, 0xF0855D59,
//				0xE935C8D7, 0xBF8F0567, 0x93912007, 0xCE810209, 0x8E0CE38D, 0xA898701D, 0xE6B6789F, 0x901BFFFB,
//				0xCA0A9FDB, 0xFC8F186F, 0xA8A4FFA5, 0xEA393429, 0xEF3AF87B, 0xB80947FD, 0xC2D190D3, 0xA8DBCCBF,
//				0xF7A1B909, 0xA4CB2F61, 0xC5AD4B79, 0xF288FED7, 0xE45710E5, 0x8A2E6A69, 0xE69BEE77, 0xF0CE6ED1,
//				0x95B94A41, 0xD2403F83, 0xD3A1919F, 0x81668DEB, 0xEBA70489, 0xD0CDB4FF, 0xD81FD1D3, 0xB302C987,
//				0xABB672CD, 0x9E55CBF3, 0xCF5B331D, 0xA8FA9803, 0x8BD6AD6F, 0xD0ED94DB, 0xC3BCF1AD, 0xC30969E3,
//				0x847FE7BB, 0xCB0959AB, 0x8CF7D80F, 0xFAEFB6C3, 0xD9EFDB5D, 0xA02B8A53, 0xCED41215, 0xDA322367,
//				0x8C2A253F, 0x88663643, 0xB8580E4B, 0x83657DE7, 0xE4E04137, 0xF9E0C7DF, 0xA68C7791, 0xC17DC8F1,
//				0xC9247ACF, 0xDC8DEE37, 0xA88A6439, 0x95E6BCF9, 0xDE0184B1, 0xE881C805, 0xCEA405C7, 0x9A3AB6F9,
//				0xB520960B, 0xD83C14C5, 0xFF570117, 0x855FCDA5, 0xEB65580F, 0xB1A10705, 0xFE1B43AD, 0xDA0B0115,
//				0xE2C5A9D9, 0xC9FB76BD, 0xDA6C84C9, 0xB76FD153, 0xF3A9039B, 0xA49668EF, 0xE09F978B, 0xF701704F,
//				0xE39ECEF7, 0xEDD14F51, 0xB1E0228B, 0xE78D0427, 0x9438B3D9, 0xB5CE57BB, 0xABFBDEB9, 0x9CEC22C9,
//				0x9BE73B1B, 0x897954FF, 0xC6E3D5B7, 0xE0D3DC53, 0xE79030AB, 0xA4E2AF8D, 0x86C337AD, 0xADCBDFA1,
//				0x8E2ED2B3, 0xB3A06767, 0xC179176F, 0xE0503E4F, 0xD30A3B83, 0xDD8A7ED7, 0xB68E5DC9, 0xA00EC5B7,
//				0xB57AD749, 0xA0148BD1, 0xEB8D7DB5, 0x8CE7A2FB, 0xA8D481A7, 0xF54EBE4F, 0xDFBF3899, 0x8F7507B9,
//				0x8DAF8FB1, 0x83C514D9, 0xC5414787, 0xD5FA5B15, 0xD90AC247, 0x864C3A75, 0x828E004F, 0xC18F9447,
//				0xF458E5D9, 0x950540CD, 0xF13D03B7, 0xABDF22BF, 0xEF226C59, 0xACA4EEE7, 0x9D9532F7, 0xDB65787F,
//				0x86F7E439, 0xA3AA8F0D, 0xEFBF06E5, 0xCC448CC9, 0x95C66415, 0xACBE0555, 0xCC211003, 0xE72A6339,
//				0x8699F4CD, 0xCAC0C9DD, 0xCA5B050D, 0xCA3D45BF, 0xE73DB38D, 0xAFA63E3F, 0xC94E3F59, 0xDAF09BD5,
//				0xCFCBE891, 0xFDA3293B, 0xDB41FBB9, 0xE86CE16F, 0xA94D8587, 0xA6D2E6D1, 0xCA179FC9, 0xDC9D87BB,
//				0xC14D4C3D, 0xF58C4C35, 0xB30ECEC3, 0xC4B12B3F, 0xE72A5A97, 0xF8CCB713, 0xF2406667, 0xE0FC83A3,
//				0xCC8EAA37, 0x87668A63, 0xFC988415, 0xCC0B2619, 0xBE0EF94B, 0xC75DEE2F, 0xFBDF3ED3, 0xF176FD55,
//				0xA8FFC28D, 0x83887061, 0xCD0A47AD, 0xB672ADC5, 0xFAFF47A5, 0xA85E7F21, 0xCAA1ED55, 0xE9E5B3B7,
//				0x888A3D55, 0xCCFED55F, 0xA3F9555B, 0x93A04925, 0xC905253F, 0xAF7525FB, 0xC427E9A9, 0xA69E3A45,
//				0x84C86EE7, 0xAB058D3B, 0xB87E35EB, 0xA03786ED, 0x9AC482DB, 0xB6815DDB, 0xC2E0B9F1,
//			};

//			Utilities.GOOD_MULTIPLIERS;

		/*
		Making this so it doesn't change modifier at all (which magnifies the effects of a seriously mismatched
		multiplier), and treats pileup as cumulative over all resizes. First 16 of the above get:

0 problem multipliers in total, 16 likely good multipliers in total.
Lowest collisions : 809444
Highest collisions: 8819524
Average collisions: 2287928.3125
Lowest pileup     : 16
Highest pileup    : 25

		On all 512 Utilities.GOOD_MULTIPLIERS:

11 problem multipliers in total, 501 likely good multipliers in total.
Lowest collisions : 595698
Highest collisions: 14424048
Average collisions: 2221559.5209580837
Lowest pileup     : 16
Highest pileup    : 69

		 */

		new int[5120];
		for (int i = 0; i < GOOD.length; i++) {
			GOOD[i] = fixGamma(i << 1, 1);
		}
		/*
		With the above fixGamma() results, we get one awful multiplier in the first 16 (subrandom!) multipliers,
		but the rest seem fairly good...

0 problem multipliers in total, 16 likely good multipliers in total.
Lowest collisions : 733633
Highest collisions: 15171715
Average collisions: 2454735.8125
Lowest pileup     : 16
Highest pileup    : 30

		Removing the problem multiplier at index 11:
1 problem multipliers in total, 15 likely good multipliers in total.
Lowest collisions : 733633
Highest collisions: 6221620
Average collisions: 1606937.2
Lowest pileup     : 16
Highest pileup    : 30

		Using 5120 fixGamma() results and a strict threshold, with 500K LEN instead of 2M:
388 problem multipliers in total, 4732 likely good multipliers in total.
Lowest collisions : 131722
Highest collisions: 1995908
Average collisions: 181235.13333333333 (only average of best 600 multipliers)
Lowest pileup     : 12
Highest pileup    : 78


		 */

//		int[] GOLDEN_INTS = new int[MathTools.GOLDEN_LONGS.length];
//		for (int i = 0; i < GOLDEN_INTS.length; i++) {
//			GOLDEN_INTS[i] = (int)(MathTools.GOLDEN_LONGS[i] >>> 32) | 1;
//		}
		final Point2[] spiral = generatePointSpiral(LEN);
		IntSet collisions = new IntSet(LEN);
		for (int i = 0; i < LEN; i++) {
			collisions.add(spiral[i].hashCode());
		}
		System.out.println(collisions.size() + "/" + LEN + " hashes are unique.");
//		final long THRESHOLD = (long)(Math.pow(LEN, 11.0/10.0));
		final long THRESHOLD = (long) ((double) LEN * (double) LEN / (0.25 * collisions.size()));

//		IntLongOrderedMap problems = new IntLongOrderedMap(100);
		final int[] problems = {0};
		final int COUNT = 5120;
		IntLongOrderedMap good = new IntLongOrderedMap(COUNT);
//		int[] GOLDEN_INTS = good.keySet().toArray();
		long[] minMax = new long[]{Long.MAX_VALUE, Long.MIN_VALUE, Long.MAX_VALUE, Long.MIN_VALUE};
		short[] chosen = new short[COUNT];
		for (int a = 0; a < COUNT; a++) {
			final int g = GOOD[a];
			{
				final int finalA = a;
				ObjectSet set = new ObjectSet(51, 0.7f) {
					long collisionTotal = 0;
					int longestPileup = 0;
					int hm = g;//0xB7AD9447;//0xF1042721;// 0x9E3779B7;

					@Override
					protected int place(@NotNull Object item) {
//						final int h = BitConversion.imul(item.hashCode(), hm);
//						return (h ^ h << 16) >>> shift;
//						return BitConversion.imul(item.hashCode(), hm) & mask; // UNUSABLE FOR VECTORS
//						final int h = item.hashCode();
//						return BitConversion.imul(h ^ h >>> 16, hm) >>> shift;
						return BitConversion.imul(item.hashCode(), hm) >>> shift;
					}

					@Override
					protected void addResize(@NotNull Object key) {
						Object[] keyTable = this.keyTable;
						for (int i = place(key), p = 0; ; i = i + 1 & mask) {
							if (keyTable[i] == null) {
								keyTable[i] = key;
								return;
							} else {
								collisionTotal++;
								longestPileup = Math.max(longestPileup, ++p);
							}
						}
					}

					@Override
					protected void resize(int newSize) {
						int oldCapacity = keyTable.length;
						threshold = (int) (newSize * loadFactor);
						mask = newSize - 1;
						shift = BitConversion.countLeadingZeros(mask) + 32;

//						int index = (hm ^ hm >>> 17 ^ shift) & 511;
//						int index = BitConversion.imul(hm, shift) >>> 5 & 511;
//						chosen[index]++;
//						hashMultiplier = hm = GOOD[index];
						hashMultiplier = hm = g;
						Object[] oldKeyTable = keyTable;

						keyTable = new Object[newSize];

//						collisionTotal = 0;
//						longestPileup = 0;

						if (size > 0) {
							for (int i = 0; i < oldCapacity; i++) {
								Object key = oldKeyTable[i];
								if (key != null) {
									addResize(key);
								}
							}
						}
						if (collisionTotal > THRESHOLD) {
							System.out.printf("  WHOOPS!!!  Multiplier 0x%016X on index %4d has %d collisions and %d pileup\n", hm, finalA, collisionTotal, longestPileup);
//							good.remove(g);
							problems[0]++;
							throw new RuntimeException();
						}
					}

					@Override
					public void clear() {
						System.out.print(Base.BASE10.unsigned(finalA) + "/" + Base.BASE10.unsigned(COUNT) + ": Original 0x" + Base.BASE16.unsigned(g) + " on latest " + Base.BASE16.unsigned(hm));
						System.out.println(" gets total collisions: " + collisionTotal + ", PILEUP: " + longestPileup);
						minMax[0] = Math.min(minMax[0], collisionTotal);
						minMax[1] = Math.max(minMax[1], collisionTotal);
						minMax[2] = Math.min(minMax[2], longestPileup);
						minMax[3] = Math.max(minMax[3], longestPileup);
						good.put(g, collisionTotal);
						super.clear();
					}

					@Override
					public void setHashMultiplier(int hashMultiplier) {
						this.hashMultiplier = hashMultiplier | 1;
						hm = this.hashMultiplier;
						resize(keyTable.length);
					}
				};
				set.setHashMultiplier(g);
				try {
					for (int i = 0, n = spiral.length; i < n; i++) {
						set.add(spiral[i]);
					}
				} catch (RuntimeException ignored) {
					System.out.println("0x" + Base.BASE16.unsigned(g) + " FAILURE");
					continue;
				}
				set.clear();
			}
		}
		System.out.println("This used a threshold of " + THRESHOLD);
		System.out.println("Indices used: ");
		for (int y = 0, idx = 0; y < 32 && idx < COUNT; y++) {
			for (int x = 0; x < 16 && idx < COUNT; x++) {
				System.out.print("0x" + Base.BASE16.unsigned(chosen[idx++]) + " ");
			}
			System.out.println();
		}
		good.sortByValue(LongComparators.NATURAL_COMPARATOR);

		long bigTotal = 0L;
		System.out.println("\n\npublic static final int[] GOOD_MULTIPLIERS = new int[]{");
		for (int i = 0, n = Math.min(600, good.size()); i < n; i++) {
			long collCount = good.getAt(i);
			bigTotal += collCount;
			System.out.println("0x" + Base.BASE16.unsigned(good.keyAt(i)) + ", //" + Base.BASE10.signed(collCount));
		}
		System.out.println("};\n");
		System.out.println(problems[0] + " problem multipliers in total, " + (COUNT - problems[0]) + " likely good multipliers in total.");
		System.out.println("Lowest collisions : " + minMax[0]);
		System.out.println("Highest collisions: " + minMax[1]);
		System.out.println("Average collisions: " + (bigTotal / Math.min(600.0, good.size())));
		System.out.println("Lowest pileup     : " + minMax[2]);
		System.out.println("Highest pileup    : " + minMax[3]);
	}

}



// old problems, sorta:
//0x8DCBB01B=0x00000011, 0x9A5DA973=0x00000016, 0x8605B14F=0x00000016,
// now replaced with surplus multipliers:
//0xEC6794E3, 0xAF2D17D7, 0xE0503E4F,

// surplus multipliers that are also good, but maybe not as good here:
		/*
				0xA9D2159B, 0xC38C5B13, 0x818CA447, 0xD510F841, 0xA9B2D14F,
				0xDEE379E5, 0xB9D1EC89, 0xF45C09BB, 0xA1858013, 0xE4B0C7D7, 0xC9A1B729, 0xF8B003BB, 0x9681B8A1,
				0xF845960B, 0xC0E3E1E1, 0xBDB5BB61, 0xBE338207, 0xDAD3E87D, 0xF47BE997, 0xF8D5A10F, 0xA7186401,
				0xC028736F, 0xA72E3CA7, 0xD20D17F5, 0xF1BDE59D, 0x981305C7, 0xD7AA623B, 0xF57C1721, 0xEE71FFCF,
				0xD7FDEB4F, 0xFD6F8003, 0xB7C99989, 0xA50DF073, 0x87D20409, 0xC0950A4F, 0xD4944633, 0xF3AF4B5F,
				0xC9F75829, 0xF83A1B1B, 0xE5CC34FF, 0xC57FE163, 0x9BFC9AB9, 0xFC2E0DC3, 0xF50BF49B, 0xF5A1BD17,
				0xB6570663, 0xDA7F4AD1, 0xBD0D9D43, 0xBE86F135, 0x95FF37D7, 0xBB230991, 0xCEA47ECF, 0xE87C8395,
				0xA6E74BBD, 0xAE396891, 0x9097B757, 0xC8DCF6F7, 0x82E94D83, 0xB1A9D71B, 0xAC36D309, 0x8A6B6E03,
				0x85AD0653, 0xAB369CDD, 0x964E180B, 0xB23AF6B7, 0xC884CDA5, 0xD0F03713, 0xB41A0F79, 0xF34BA71D,
				0x810B3815, 0xE1EA7571, 0xAFAE025F, 0xDBC3E995, 0x95B83E4B, 0xE6C1F38F, 0xD6E6ADFF, 0x86C08431,
				0xCD48F2CD, 0xD8ACC197, 0x8EEF6BAF, 0xF201423F, 0xEF20DEB9, 0xF3E05B01, 0xC1A3E7EF, 0xD5732027,
				0xA7CCF7C1, 0xCA462719, 0xD0193283, 0xB8B05183, 0xEA393CCB, 0xEA513EA1, 0x9308FBAB, 0xE985B501,
				0xAA4D42AB, 0xD5FD6511, 0xC9B04D59, 0x86798AA5, 0xFEF1ACAD, 0xC29ABB17, 0xF8655C01, 0x8BB6CD93,
				0xF7CE9031, 0xBDBC7C2D, 0xCBFAF105, 0xA3557859, 0xF6D9CC53, 0xEFCFB501, 0x99D0C251, 0xD687BB3F,
				0x8E13BE3F, 0xA6D833E3, 0xD2E85DA1, 0xA505A207, 0xE27022BF, 0xA23D4057, 0xC54C382B, 0x88A7839B,
				0xD3360F57, 0x853CC145, 0xAE0C8025, 0xC02CA347, 0xBFDEE04D, 0xC2A18485, 0xD58D3147, 0xEC1E0A63,
				0xC7010217, 0xBF135F4F,
				0xBBDF83F9, 0xB58336F9, 0xE3ADF815, 0xFF1D101B, 0xF54A9719, 0xB8101A0D, 0xC2C0610D, 0xDA6B8A17,
				0xD6053A75, 0xA034DC13, 0xF6B19569, 0xE4C175F3, 0xAA43DFA7, 0xAD3C4503, 0x9131A709, 0x8D6DB80D,
				0xD40E287F, 0xA1D1B56D, 0x99C65357, 0xBE1E9B71, 0x9268BB93, 0xAC58C22F, 0x92C8C2EB, 0xA3E79B49,
				0xA0597613, 0xF312406D, 0xAF8133D9, 0x8CE487BB, 0xD82D75F3, 0xADDEA5A9, 0xB8112603, 0xDBCDE829,
				0xA0A16A51, 0xF3D7FB51, 0x91D9B3E3, 0xB51E6CDB, 0x94D2193F, 0xACCB0543, 0xC73E8FFD, 0x86A5E8C5,
				0x9A62E541, 0xDE89BA51, 0xF831BB6B, 0x94545B3B, 0x94EA23B7, 0xC6BB1481, 0x967B797F, 0xE701AAA5,
				0xD3F84737, 0xC2502D43, 0xE266BFBB, 0xB30AB02F, 0xBD8AF383, 0xB322B205, 0xDD23BF55, 0xF67DFD75,
				0x92D5412F, 0xFAA69407, 0xD3927123, 0xFEDCCEB9, 0xDCF967DD, 0xE779AB31, 0xEF318CD5, 0x8AEE67D5,
				0xDF2C09B3, 0xAE50E8BD, 0x996863EB, 0x8F182443, 0x829B08DF, 0xDDBF3CA7, 0xA01EFACB, 0xEA9C5F63,
				0xA69FD929, 0xBBA05FD1, 0x965ECEC9, 0xA5EC515F, 0xD9D21C0F, 0xFA18B233, 0xD9A8E1D1, 0xC7053A91,
				0xEEFBCBB1, 0x85AB676F, 0x902BAAC3, 0x9B59B869, 0xD54E0D1F, 0x98F71B89, 0xFE7DD357, 0xC8E33619,
				0xB483FB7F, 0xEE90520B, 0xC8D0FA5D, 0xCD12AFFF, 0xDDE982DB, 0x8426A12F, 0x911BC5C1, 0x8F36EF87,
				0xBC1F326D, 0x92B3ED99, 0xBF479B75, 0xDA332F5D, 0xDBAC834F, 0xB69AF5F3, 0xD9A9EDC7, 0xC443A24F,
				0xFF7960A3, 0xADA421BF, 0x9EAC67A5, 0x89C3E2D3, 0x85B230DD, 0x8BBAFD6B, 0xEC04724B, 0xC7F42FB3,
				0xC859FD25, 0xFDA6D769, 0xA4AF7F5D, 0xD0C56693, 0xB40740CF, 0xE8A09349, 0x9FB48479, 0xF80A9919,

		 */
