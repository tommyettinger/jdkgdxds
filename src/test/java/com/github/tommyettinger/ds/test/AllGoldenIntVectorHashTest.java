/*
 * Copyright (c) 2022-2025 See AUTHORS file.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.github.tommyettinger.ds.test;

import com.github.tommyettinger.digital.Base;
import com.github.tommyettinger.digital.BitConversion;
import com.github.tommyettinger.ds.IntIntOrderedMap;
import com.github.tommyettinger.ds.support.sort.IntComparators;
import org.jetbrains.annotations.NotNull;

import java.io.IOException;

import static com.github.tommyettinger.ds.test.PileupTest.LEN;
import static com.github.tommyettinger.ds.test.PileupTest.generateVectorSpiral;

/**
 * 0 problem multipliers in total, 512 likely good multipliers in total.
 * Lowest collisions : 604465
 * Highest collisions: 677203
 * Lowest pileup     : 16
 * Highest pileup    : 47
 * <br>
 * 0 problem multipliers in total, 512 likely good multipliers in total.
 * Lowest collisions : 603139
 * Highest collisions: 618189
 * Lowest pileup     : 15
 * Highest pileup    : 21
 * <br>
 * 0 problem multipliers in total, 512 likely good multipliers in total.
 * Lowest collisions : 603295
 * Highest collisions: 635893
 * Lowest pileup     : 15
 * Highest pileup    : 25
 * (This may not seem as good, but it does the best so far with GridPoint2 and dictionary words.)
 */
public class AllGoldenIntVectorHashTest {

	public static void main(String[] args) throws IOException {
		final int[] GOOD =
//			new int[]{
//			0x9E3779B7, 0x91E10DA5, 0xD1B54A33, 0xABC98389, 0x8CB92BA7, 0xDB4F0B91, 0xBBE05633, 0x89E18285,
//			0xC6D1D6C9, 0xAF36D01F, 0x9A69443F, 0x881403B9, 0xCEBD76D9, 0xB9C9AA3B, 0xA6F5777F, 0x86D516E5,
//			0xE95E1DD1, 0xD4BC74E1, 0xC1EDBC5B, 0xB0C8AC51, 0xA127A31D, 0x92E852C9, 0x85EB75C3, 0xEBEDEED9,
//			0xC862B36D, 0xB8ACD90D, 0xAA324F91, 0x9CDA5E69, 0x908E3D2D, 0x8538ECB5, 0xBF25C1FB, 0xB1AF5C05,
//			0x9989A7D9, 0x8EB95D05, 0xE0504E7B, 0xD1F91E9D, 0xB7FBD901, 0xAC38B669, 0xA13614FB, 0x96E7A621,
//			0x8D41E4AD, 0x843A0803, 0xF1042721, 0xC91FE60D, 0xBD5A4AD1, 0xB24512C7, 0xA7D5EB01, 0x94C37CD5,
//			0x8C0E724F, 0x83DBDF3F, 0xF22EECF7, 0xE51CC09B, 0xD8BF2D51, 0xCD0C73D1, 0xC1FB5B85, 0xAD9BA24D,
//			0xA43CF217, 0x9B5FB7D3, 0x92FCF6CB, 0x8B0E12CF, 0x838CCB05, 0xDB70396F, 0xBC193375, 0xA9BBB6A1,
//			0x8A35060F, 0xF40BA295, 0xE8A62E75, 0xDDC8F72B, 0xD36DA013, 0xC0249885, 0xB72B9CF7, 0x9747627B,
//			0x9036EA01, 0x897AE4FD, 0xF4CCD627, 0xEA171C21, 0xD60E4185, 0xCCB0DCDF, 0xC3BC5AB1, 0xBB2C2447,
//			0xAB273EB1, 0xA3AA5A35, 0x88D9849B, 0xF57716BD, 0xEB5D28EB, 0xE1ADA55D, 0xC6F2B277, 0xB6E92FC9,
//			0xAF62415F, 0xA13F04BD, 0x943F8703, 0x8E25C2E9, 0x884C43B5, 0x82B0645B, 0xF60E4093, 0xEC7F64E5,
//			0xDA7B216D, 0xD1FE7BF7, 0xC9D63C03, 0xC1FF1A4B, 0xB337B641, 0xAC418363, 0xA5908B4B, 0x9F221D85,
//			0x98F3A45F, 0x9302A3DB, 0x8D4CB8AF, 0xF6955E05, 0xDC5C91B7, 0xD44186D3, 0xBDAF3BEB, 0xB6B5103B,
//			0xA98368C9, 0x9D45AB03, 0x977CB5A3, 0x8C8C366B, 0x8760BD83, 0x8265F323, 0xD64E71E3, 0xCED220B1,
//			0xC09FF697, 0xB9E58585, 0xB3673E6F, 0xAD23075B, 0xA716D915, 0xA140BE91, 0x9B9ED43F, 0x962F4775,
//			0x8BE04CC3, 0x86FD88C3, 0x8246750D, 0xF77CB1D7, 0xEF41DBE9, 0xDF9C098D, 0xD0FC339F, 0xCA092125,
//			0xC35137BF, 0xBCD27FCF, 0xB68B1273, 0xB07918F9, 0xAA9ACC57, 0x9A250D21, 0x90103F13, 0x8B45D8CF,
//			0x86A43AC3, 0x822A09C7, 0xF002ED13, 0xE8654625, 0xE1057C8D, 0xD2F7B733, 0xCC45FDB1, 0xC5CAA50D,
//			0xBF83F38F, 0xB38DE4B9, 0xADDB5841, 0xA85713D1, 0x8ABA52BD, 0x86536A15, 0xF83B8239, 0xF0B35A25,
//			0xDB72DC35, 0xD4CA486F, 0xCE556D09, 0xC812B845, 0xC200A49B, 0xBC1DB84D, 0xB6688515, 0xB0DFA7CD,
//			0xAB81C813, 0xA64D97FB, 0xA141D3B5, 0x9C5D414B, 0x979EB049, 0x8E8EFE9F, 0x8A3BAA23, 0x8609EEE3,
//			0x81F8C7E5, 0xF88EE8ED, 0xF1553311, 0xEA51424F, 0xDCE47B27, 0xD03C9BDD, 0xCA2EF613, 0xBE997F95,
//			0xB90F1A29, 0xAE74CE8F, 0xA9628B9F, 0xA476060B, 0x9FAE24F5, 0x9B09D7AF, 0x96881577, 0x9227DD3D,
//			0x8DE8356B, 0x81E34C0F, 0xF8DB9899, 0xF1EA3409, 0xE49ACC3B, 0xDE3A0E8B, 0xD806DE3B, 0xD1FFF5EF,
//			0xC0E8BE65, 0xBB86F28B, 0xB64B9731, 0xAC43EF7B, 0x9E3EE499, 0x99D4AB95, 0x915DF131, 0x8D4FB3AD,
//			0xF92258D9, 0xF273D571, 0xEBF33221, 0xE59F33F1, 0xDF76A85B, 0xD9786511, 0xD3A347C5, 0xCDF635F1,
//			0xC30FF04F, 0xB8BD53F7, 0xB3C8EFED, 0xAEF69073, 0xAA454BF7, 0xA5B43F2F, 0xA1428CE7, 0x9CEF5DDB,
//			0x8CC3B777, 0x8550B4B7, 0x81BD62C3, 0xECAD6DC1, 0xE690FA59, 0xE09CEC0D, 0xDAD037D9, 0xCA4C3001,
//			0xC512FD47, 0xBFFC5183, 0xBB074877, 0xB63303D1, 0xB17EAAF7, 0xA419044D, 0x9BBBA271, 0x97B63B39,
//			0x93CB6869, 0x8FFA7A51, 0x8C42C5C9, 0x88A3A413, 0x851C72C1, 0x81AC9397, 0xE7720D2D, 0xE1AF214F,
//			0xDC10EC99, 0xD13F0697, 0xCC0992A9, 0xC6F5505B, 0xC2016C27, 0xB8778A19, 0xB3DFFEFD, 0xAF65B735,
//			0xAB07F845, 0xA6C60C57, 0xA29F4217, 0x9E92ECA3, 0x96C701E9, 0x930627ED, 0x8F5D391D, 0xF9D92999,
//			0xF3D82B23, 0xE844186B, 0xE2AF4337, 0xDD3CC3C5, 0xD2BB7E5F, 0xCDAB2117, 0xC8B9EAA9, 0xBF31F86F,
//			0xBA99CB0F, 0xB61DE131, 0xAD7824A7, 0xA94D02AD, 0xA53B8563, 0xA1430F0B, 0x9D6305AD, 0x999AD307,
//			0x95E9E475, 0x924FAAD3, 0x8ECB9A75, 0x8B5D2B07, 0x8803D777, 0x84BF1DEF, 0x818E7FAF, 0xFA0DEED9,
//			0xF43F3741, 0xEE93070D, 0xE90890F1, 0xE39F0C67, 0xDE55B58F, 0xD92BCD17, 0xCF336023, 0xCA6372CF,
//			0xC5B021FF, 0xAFC6001D, 0xA00117CF, 0x9C49C697, 0x98A88D81, 0x951CE92D, 0x8AF6847D, 0x87BC4D8D,
//			0x8180FE8F, 0xFA3F486F, 0xF49FA91F, 0xE9C0BDF5, 0xE4800215, 0xDF5D7E31, 0xDA588471, 0xD0A48B75,
//			0xC75EF4F3, 0xBA3AE02B, 0xB60B8819, 0xB1F44341, 0xADF48725, 0xAA0BCC5F, 0xA6398E99, 0xA27D4C75,
//			0x9ED6877B, 0x9B44C40B, 0x97C7894D, 0x945E6123, 0x9108D811, 0x8DC67D37, 0x8A96E23D, 0x87799B49,
//			0xFA6D85BD, 0xF4FA1811, 0xEFA509F9, 0xEA6DB233, 0xE5536B35, 0xDB738B33, 0xD6ACB8C9, 0xCD6E58F9,
//			0xC8F5A633, 0xC495DDE1, 0xC04E7531, 0xBC1EE451, 0xB806A665, 0xB01A1E63, 0xAC44D8CD, 0xA884EF07,
//			0xA4D9EA11, 0x9A51B865, 0x9075C7D5, 0x873B1719, 0x84498F5D, 0x81686E6F, 0xFA98EFEF, 0xF54F0FFD,
//			0xEB106D05, 0xE61A7887, 0xDC7E65E5, 0xD7D72935, 0xD349104B, 0xCED39351, 0xCA762D55, 0xC201A07F,
//			0xB9E77939, 0xB5FB1C0D, 0xB223F10D, 0xA01EB619, 0x9CBDA623, 0x996ED7BF, 0x9631E84F, 0x8FEC261B,
//			0x8CE29851, 0x87005E7F, 0x815D0BFB, 0xFAC1E365, 0xF59F42F9, 0xF0978EA7, 0xEBAA3947, 0xE6D6B899,
//			0xDD7B1A6B, 0xD8F1F657, 0xD48099B1, 0xD02687CD, 0xCBE3468F, 0xBF9DC6D1, 0xBBB1344F, 0xB7D93465,
//			0xB4155B3B, 0xB0653F27, 0xACC878AF, 0xA93EA279, 0xA5C75937, 0xA2623BAB, 0x9F0EEA91, 0x9BCD089B,
//			0x989C3A5F, 0x957C2657, 0x926C74D1, 0x8C7CE379, 0x84084133, 0x81540F2D, 0xF5EA757B, 0xF1061383,
//			0xEC3A9B97, 0xE7878ED5, 0xE2EC70E1, 0xDE68C7D9, 0xD9FC1C49, 0xD5A5F919, 0xD165EB8B, 0xCD3B8325,
//			0xC92651AD, 0xC139E57F, 0xBD61D91F, 0xB5EC1723, 0xB24D9C1F, 0xAEC18F6D, 0xAB47932D, 0xA7DF4B61,
//			0xA4885DE1, 0xA1427249, 0x9E0D31FF, 0x9AE8481D, 0x97D3616F, 0x94CE2C6B, 0x91D85923, 0x8C199FFD,
//			0x89502219, 0x8694D5D3, 0x8147B271, 0xFB0C904D, 0xECC37005, 0xE3B1B659, 0xDF4A6A77, 0xD6BCCE3D,
//			0xC699FDE9, 0xBEFE7C61, 0xB7AD9447, 0xB420340D, 0xB0A46A15, 0xAD39DF49, 0xA9E03E49, 0xA6973357,
//			0xA35E6C53, 0x9A129165, 0x9717C447, 0x942BB7B9, 0x914E22B5, 0x8E7EBD99, 0x83C99FAF, 0x813D274D,
//			0xF1D08AF9, 0xED43566B, 0xE8CC107F, 0xDBE5BFB7, 0xD7C22743, 0xD3B28091, 0xC433F035, 0xC0828467,
//			0xBCE2E433, 0xB954B9D7, 0xB5D7B133, 0xB26B77B9, 0xAF0FBC67, 0xABC42FC9, 0xA55C6C2F, 0x9F31CE91,
//			0x99420F2B, 0x965F9259, 0x88BE7A7B, 0x862B90A5, 0x83A50DD7, 0xFB50D045, 0xF6B791E9, 0xE96B8497,
//			0xE5261A7F, 0xE0F4B24F, 0xDCD6EE4F, 0xD8CC727B, 0xD0EFEBB9, 0xCD1D3113, 0xC95C5F1B, 0xC5AD21EF,
//			0xC20F2731, 0xBE821E09, 0xBB05B719, 0xB0F14B83, 0xADB47065, 0xAA86BFE7, 0xA457C3ED, 0xA155EE39,
//			0x9E622EAD, 0x9B7C434D, 0x98A3EB51, 0x95D8E71F, 0x9069E18D, 0x8DC566B9, 0x8B2D4CBD, 0x83AD0557,
//			0x8144356D, 0xFB6D5599, 0xF6EF948D, 0xEE3151B7, 0xE5C24EC9, 0xDD9FBD6F, 0xD9AA45DB, 0xD5C6E8C7,
//			0xD1F55367, 0xCE35346F, 0xCA863C03, 0xC6E81BB7, 0xBFDD30C1, 0xBC6FD021, 0xB9121BAF, 0xB5C3CBBD,
//		};
//			new int[]{
//				0x30997D75, 0x419F6AE3, 0x7FC6F5F3, 0xD33C4C3D, 0xEEDAD501, 0x158D36F9, 0x4912D2B7, 0xA27A0E77,
//				0x5A8AB569, 0xF7914C3D, 0x9B56CC3D, 0x0A4348A3, 0x47C2F571, 0xB4A9C255, 0xE0EDF571, 0x260DFD75,
//				0xBF0B1E47, 0xC55254FF, 0x802F52B7, 0x16150E77, 0xFE2C5205, 0x6EAB7D75, 0xB7F7D5EB, 0x2E15EAE3,
//				0x111A4987, 0xFB412207, 0x3262E173, 0x9EBFA119, 0x78DA7B2F, 0xCA116CE9, 0xE8A214D9, 0x456B85C7,
//				0xDB8CC255, 0x37702DC3, 0x60820427, 0xA361A649, 0x2F4D7B2F, 0x45B0D2B7, 0x2BE694D9, 0xAE9865D5,
//				0x90273B83, 0x2224D4FF, 0xE798EAE3, 0xE6D3F5F3, 0x9356E5D5, 0xD04765D5, 0x6243B6F9, 0x8FCAD4FF,
//				0x68AB8E77, 0xD680D339, 0x44A5ADC3, 0x80914C17, 0xE43FE173, 0xDF31ADC3, 0x5D8BC057, 0x987A52B7,
//				0x9CF30427, 0x2B165205, 0x22DFBCA7, 0xF70EFB2F, 0x3DEBD4FF, 0x07AB55EB, 0x2A61B569, 0xA32B7D75,
//				0xE1DCA649, 0x02F63713, 0x52DAD501, 0xC7ADB569, 0xAB818427, 0x1F675501, 0x4FCC3B83, 0xEEEEFB2F,
//				0x77CB4987, 0xBC9265D5, 0x3EE914D9, 0x77F854FF, 0xB3E7C8D7, 0x89D4D5EB, 0x37487571, 0xC2C2AA37,
//				0xFE3714D9, 0xBEC16173, 0xD9C8D2B7, 0x0212BB83, 0xEFBF7BB3, 0xEAC3A119, 0x18C2C8D7, 0xCE48C057,
//				0x7C41E8E7, 0x35C65205, 0xAFE24057, 0x3D5C14D9, 0x06F0C8A3, 0x1D06F6F7, 0x9C5E0E77, 0x72CB7D75,
//				0x4E582649, 0x41E13713, 0xC5A1F5F3, 0x1F36CC17, 0x774BB569, 0xC31ACC17, 0xB0B1FBB3, 0x2E20F6F7,
//				0x2156FD75, 0xBE5BAA37, 0x7935B713, 0xDC8F2207, 0x5852A649, 0x448F5501, 0xFD250415, 0x46A9D501,
//				0x5161CC17, 0x491AA649, 0xCB02C8A3, 0x8EDD1E47, 0x8130ECE9, 0x895548A3, 0xCB8D7D75, 0x2B6DADC3,
//				0x7B814C3D, 0x6912C987, 0x2A08C4BF, 0x1D484057, 0x224750DB, 0x939F7BB3, 0x7F19D0DB, 0x671B7571,
//				0x9D1D2DC3, 0x50D5EAE3, 0x33953569, 0xF3B365D5, 0xB88C1E47, 0x0FE6B569, 0xC7CDEA89, 0xE1F5D205,
//				0x908CD501, 0x52E0C2E5, 0xC3B05339, 0x245D42E5, 0xD3BFC057, 0x648568E7, 0x002F2649, 0x37CB0415,
//				0x8778CC17, 0xD80D48A3, 0xB16052B7, 0xACEDD501, 0x94E9D0DB, 0xE9260415, 0x8AE43B83, 0x691848D7,
//				0xDFE7F6F7, 0xE874C987, 0x7BD6CD59, 0xAF05BCA7, 0x01938427, 0xBE624987, 0xF3DA8427, 0xB43C42E5,
//				0x5E4B0427, 0x37A35339, 0xAAAA6173, 0x335BCC3D, 0xD6CD4EC9, 0x5E2E94D9, 0x549A4C3D, 0x005D65D5,
//				0x99B8E8E7, 0x3F5D5205, 0x050FEAE3, 0x5CC98427, 0x67CFD5EB, 0x6E4B85C7, 0x16A0E173, 0xA4B7E5D5,
//				0x85ED2119, 0xA999A207, 0x241955EB, 0x2CBF2207, 0xD7610427, 0xC85DFD75, 0x9C104D59, 0x7032B713,
//				0xA95FE8E7, 0x337EF6F7, 0x74104C17, 0x9099C057, 0x11568415, 0x359A48D7, 0x2191A649, 0xB87BA207,
//				0x684DAA37, 0xA9F355EB, 0x51CDC057, 0xEB2952B7, 0xF6F5AA37, 0xFD7F9497, 0x4C3C52B7, 0xF2DF85C7,
//				0x4443C8A3, 0x44CCE5D5, 0x49F854FF, 0x47EFB713, 0xF0D02DC3, 0xEC437B2F, 0x7680EA89, 0x121BD0DB,
//				0xC3ECC057, 0x0C0AF571, 0xD5312DC3, 0xAFF4C4BF, 0xA6DF2207, 0xDB062A37, 0x633DC8A3, 0x34C1D205,
//				0x36CB48A3, 0xACE84987, 0x9A7DE173, 0xE05950DB, 0x0412F571, 0x5C276AE3, 0xB705D5EB, 0xC1C93B83,
//				0xB6864C3D, 0x2079B6F9, 0xB62FD2B7, 0x92B35501, 0xFED442E5, 0xB3ACD205, 0xC4EEA649, 0xB44F8427,
//				0xE6A014D9, 0x8FD3F5F3, 0x291155EB, 0x51EB9497, 0x99694EC9, 0x7DB594D9, 0xA1627D75, 0x6A1EE5D5,
//				0xD7442119, 0x0801AA37, 0x0D6A4987, 0x55AF5205, 0x511C5501, 0x452C9497, 0x355BC2E5, 0x878C55EB,
//				0x464FD4FF, 0xCBAB6AE3, 0x0E33B6F9, 0x4FA848A3, 0xE0C22207, 0x20C84C17, 0x7DC0CC3D, 0x2E3FC057,
//				0xE75D52B7, 0x53D14D59, 0x6EDACEC9, 0xD7E47B2F, 0xDDCA2119, 0x44851E47, 0xE24C1E47, 0x036C48D7,
//				0xB1D3FD75, 0x007055EB, 0xD32AF571, 0x3E1CD205, 0x3A527BB3, 0xB7F6B569, 0x76B2BCA7, 0x8135ADC3,
//				0x071A8415, 0x3B48FBB3, 0x5F89ECE9, 0xD4CA42E5, 0x80FF3713, 0xE0930E77, 0xD8538427, 0x7DC05339,
//				0xEEE1ADC3, 0xD7750427, 0x5B79EA89, 0x22A3A649, 0xBB9E1497, 0xDFEBCC17, 0x1E4CD0DB, 0x334B4255,
//				0xFFEFD4FF, 0xB979FB2F, 0xB19DD2B7, 0x0D6AD0DB, 0x43AEAA37, 0x23346173, 0xD9372119, 0x694952B7,
//				0x88BDA207, 0xE3686173, 0x3BB5ADC3, 0xA7E3D501, 0x3DFB85C7, 0x25368415, 0x5401CC17, 0x74AE85C7,
//				0x54844057, 0xE9D4E8E7, 0x2B8FFB2F, 0x67EAC987, 0xEB5A2119, 0x68E21497, 0xC6244255, 0xE3278427,
//				0x448C52B7, 0xAA274EC9, 0xCAF64987, 0x14A4ECE9, 0xB2BD2207, 0x0DF2CC3D, 0x90F92207, 0x47C6CC3D,
//				0xA7503713, 0xA5B34C3D, 0xFB5A0E77, 0xAACE3569, 0x3894C057, 0x4E51E173, 0xC5382A37, 0x6FD9C987,
//				0xA0B97B2F, 0x73D95501, 0xD49DC987, 0xC22AF5F3, 0xF910FBB3, 0xF93905C7, 0xD9077571, 0x17AFF6F7,
//				0xB4A314D9, 0xA945E8E7, 0x0A345501, 0x4237CEC9, 0xA837D205, 0x02CF85C7, 0x289F4EC9, 0x07F876F7,
//				0xA65DCEC9, 0xEF87C987, 0x694942E5, 0xF02BF571, 0xDB8442E5, 0x694E50DB, 0x261344BF, 0x38708E77,
//				0x7E9AB713, 0xC8034987, 0x97580427, 0x2EC585C7, 0x10A2B6F9, 0x06E8F571, 0xE5C24EC9, 0xDDDFCDD1,
//				0x53014DD1, 0xDA1FC7FB, 0xE17B136F, 0x9B89C7FB, 0x34D10B4F, 0x5996D71B, 0x35C9CDD1, 0xB910CDD1,
//				0x572F0B4F, 0xA9B2C7FB, 0x2EB88B4F, 0x680547FB, 0xFFFAC7FB, 0x0EE647FB, 0x6878936F, 0xBA28CDD1,
//				0x2F54936F, 0x3970CDD1, 0x0F39136F, 0x5EC7936F, 0xC5BDC7FB, 0x05F4571B, 0x078E936F, 0xF904936F,
//				0xCD9B0B4F, 0x71DDD71B, 0xF791CDD1, 0xDAD5C7FB, 0xB32C4DD1, 0x1444571B, 0x32BAC7FB, 0xD713571B,
//				0xF96E4DD1, 0x27948B4F, 0xCAE9CDD1, 0x90FD136F, 0xC4EC8B4F, 0x6061571B, 0xC9FE136F, 0x501C571B,
//				0x5CC747FB, 0x8ECCC7FB, 0x3614548F, 0x54BA2AA9, 0x3FB18A27, 0xD7101A2D, 0x2E2514C9, 0x61DEF7C7,
//				0xCB564ED1, 0x153A0EB9, 0x87BE0CAF, 0xF89FC43F, 0xBCAC00F5, 0xCD2F77C7, 0xE44CD0CD, 0x9A8A14D1,
//				0x3572EAF1, 0xF906CAB9, 0xC24C98E1, 0xB0C11663, 0x1085CBF3, 0x3C5AB53D, 0x23F37C2F, 0xC3F438A1,
//				0x1C0F5DB3, 0x6B1CE795, 0x409A741B, 0x1A7AE9E7, 0x737040CF, 0xFD1D7E5D, 0x14481CB1, 0xBF4B6F35,
//				0x6DA4A781, 0xAD6EBF25, 0x76595695, 0xAE1BCB61, 0x6D7DF667, 0x33098BD7, 0x83D0AC31, 0xE6BEF46B,
//				0x579DF7C7, 0x7F80E53B, 0x977D0A5D, 0x4B10F71F, 0xA7CF0475, 0xCEDF10DF, 0xAB739CEB, 0xA8702733,
//				0xCDB7D14F, 0x6C41409D, 0xB907D7F3, 0x6831357D, 0x7FFBF855, 0x39A937AD, 0x4B3470FD, 0xFF6B3DE1,
//				0x175C9C89, 0xC527A781, 0xFC18E671, 0x77622A4F, 0x2F88548F, 0xC54D38A1, 0x31EE00C9, 0x08428D31,
//				0x191D66FF, 0x7C639F61, 0x1E8BFDE7, 0x2990F17B, 0xB9023DE1, 0x85D64B83, 0xD7EEDD93, 0x48738D13,
//				0xEE72765B, 0x88F9D823, 0xC807AB3F, 0x6D79C7D7, 0xEDC8773B, 0x13D2CC4F, 0xB106CAB9, 0x21E6E53B,
//				0xCA031FAD, 0x9A69443F, 0xA175E81D, 0xC6E439B5, 0xC3AB35F7, 0x62579D2F, 0xA8D9A733, 0x25014BA7,
//				0x12B8FC4F, 0xB8FD40FB, 0xDB00286B, 0x509D653D, 0x5D157861, 0x6CB38B11, 0xA732BD63, 0x9FF6AC31,
//				0x74DF6795, 0x7E622BC5, 0xC8D66795, 0x0872548F, 0x92EAF8A9, 0x1E15B873, 0xE257746B, 0x5A4A2AA9,
//				0xE0A88A73, 0xC5D4AC31, 0x54231F61, 0x4DF0653B, 0x836E5D93, 0x335514D1, 0x759A66F1, 0x925A3D49,
//			};
			new int[]{ //0xEFAA28F1 should be the initial multiplier
				0xEC6794E3,
				0x9B89CD59, 0xDCA1C8D7, 0xC5F768E7, 0x92317571, 0x937CD501, 0xE993C987, 0xD5567571, 0x85C8ADB5,
				0xE6AC8B4F, 0xC21736F9, 0xFD890F79, 0xC514D823, 0xF151575F, 0x8BDCE3EF, 0xA7F27B2F, 0x8C1EAA4F,
				0xCCE4C43F, 0x82E28415, 0xC6A39455, 0xE6245E51, 0xC33AFB2F, 0xBFA927CB, 0xAC11C8A3, 0xC00E6AF1,
				0xF98DDA5B, 0x8FA1F025, 0xF0CFFC71, 0xA49DC54B, 0xB3A7C3C3, 0xC2F9C7BD, 0xE0CC8899, 0xB3B0A51D,
				0xF01DF9A5, 0x9E7300F5, 0xA7E675F3, 0xFE3FB283, 0xE0FF1497, 0xB2CE9603, 0xD9EF3FCD, 0xB7F3D71B,
				0xE438BEA9, 0xF16A6DCD, 0xA4613217, 0xAAE7C54B, 0xB56A208B, 0xBCA43B89, 0xEBE28BC7, 0x8567101B,
				0x9F45E6F1, 0xF95D5505, 0xCDCBFDE3, 0xECFA5363, 0xB449917B, 0xE1D8CCA3, 0xE208D04F, 0xC0A33019,
				0xCD722469, 0xC3D56C8B, 0xEC34F7A1, 0xBF6C9497, 0xAE7244F5, 0xF3DEC4BF, 0xB79FD4FF, 0xFF54D7E7,
				0xEE99B50F, 0xB965E897, 0xE37B5231, 0xF9FBF639, 0x965B209B, 0xFB164EC9, 0xE33667EF, 0x808498B7,
				0xFFD4C7BD, 0xCF6740FB, 0x98EFE1B5, 0xA5CCFBCF, 0xB268E277, 0xFF48E3EF, 0xAB8ECED1, 0x83B4DFC5,
				0x8E4EA9ED, 0xDB6B35F7, 0x9DCAF41B, 0xC2EEC5D5, 0xBBEB6F4F, 0x9645256D, 0x9BE82D2B, 0xC7C8533D,
				0x8FA69905, 0xE4F8CD59, 0xAFDBF6C1, 0xC17E533D, 0x80922B93, 0xF40F52B7, 0xB824EF5F, 0x8EFBF295,
				0xFA482B93, 0x8492ADC3, 0xBCBA2E15, 0xD6F7F7AB, 0x80A58489, 0xB867400B, 0xD5D33021, 0xF43AAD83,
				0xA495DEA3, 0xBF03ABE5, 0xFCE635CB, 0xB4422C7D, 0xCB39CDBD, 0xB370E565, 0x8701C045, 0xCD01F09F,
				0xEA326ABB, 0x8DB96BBD, 0x97D3EA41, 0xE4B3EBB9, 0xA9D2159B, 0xF3EDEDDD, 0xE018F82D, 0xE609C2E5,
				0xFE852FB3, 0xC2107ECF, 0xD42AE479, 0x9E128095, 0xF38831AF, 0xAF439D51, 0x87FF76C1, 0xD48BF7C7,
				0x8099F855, 0xCBC5273F, 0x978BDC1D, 0xEDEAD625, 0xB784AF47, 0x8C4C960F, 0xDC0CFB0D, 0xFCB95601,
				0xA25AF703, 0xE0F6C62B, 0xB9229497, 0x80B41AB9, 0xCEA1EDDB, 0xB5A7B713, 0xC7AA1AE7, 0xED81746B,
				0xAB08B11D, 0x8F63D7F3, 0x8FABDD75, 0x8F405B2D, 0xDD51AB15, 0xD7131D63, 0xFCC13CA9, 0xE7D8B7D7,
				0x83A0FC83, 0xD689CA89, 0xECE5E5D5, 0xC1CB8BEB, 0xF1D565C9, 0xC1ADCC9D, 0xB2985335, 0xF28FB701,
				0xE8F1FBCF, 0xC8E7F03D, 0xF3AEC9B5, 0xCF030129, 0xB84DA7F3, 0x94A32A2B, 0xEB1A2609, 0xA1E0543F,
				0xFF96253F, 0x87604B41, 0xA1FE1C2F, 0xD5FBE8B5, 0xF0707F65, 0xE81D17CD, 0x9D3430ED, 0xF44D7C2D,
				0xFAAD5D75, 0x9ED5A1E3, 0xBA56FE47, 0xFAB9E45B, 0x94DFAC1B, 0xC0A7D057, 0xC4E985F9, 0xA8612159,
				0xE35C86ED, 0xFA0C22AB, 0xE607294F, 0xCC11653B, 0xFAD1EED3, 0xA49D3AFF, 0xB7D7B6B1, 0xC0A8E4EF,
				0xAF255C59, 0xF101965F, 0xBA7DB033, 0x9AC1679B, 0xC1831603, 0xE6F4AAB7, 0x8DC1D40F, 0xC076504F,
				0xCC8965C7, 0xA562FE85, 0xEE138EB9, 0xF0EE34C7, 0xEE739611, 0xFE191A7D, 0xCBBEE81D, 0xD0DE6BBD,
				0xF6D38D31, 0x9F620FFD, 0x82E63243, 0xF4A1FFF3, 0xAD1185C7, 0x83B2BF37, 0xADE3D033, 0xD568B12D,
				0x927B92DF, 0xF664655D, 0x9CB98587, 0x825DFCA3, 0xD5AC8F79, 0xC79860D5, 0xD063D19B, 0xDE0C7DF7,
				0x9C2759F5, 0xA856B25F, 0xB1BEB50F, 0xCED724B3, 0xD68F0657, 0xC862D5DD, 0xACABAFB3, 0x9E01B893,
				0x98FB4B61, 0x87D6B58B, 0xCE42682D, 0xC8FF67C7, 0x8F531893, 0xCFB5FEA7, 0x83D18A7B, 0xB07D3A2D,
				0xB423727D, 0xAA333A2D, 0x978F92ED, 0x830CD2EB, 0xA5EBC713, 0xD3C8C535, 0xDAE520E5, 0xCC356C4D,
				0x8AE04AAD, 0xAC226E1D, 0x966E5FAB, 0xD241CD23, 0x84487F11, 0xA5DE22F3, 0xE2061CD3, 0xBE5B9F0B,
				0xC88E2807, 0x8AEDE62B, 0xAF2D17D7, 0xC1188E6D, 0xD08851B5, 0xA979EC49, 0xA26FD4F7, 0xFC92BDFB,
				0xFB73BC8B, 0xB26FABE5, 0xC2F8BBC7, 0xC5AA2797, 0xB5511B61, 0x8BCDD4B7, 0xC4431803, 0x853BC693,
				0xFF544D9B, 0x8D32BB1B, 0xCF2CB46F, 0xBCBECE53, 0xCF26F6F7, 0xE3C1B8CF, 0x92648319, 0xC29E60A3,
				0x880E8E9B, 0xD7336DA5, 0xDF391243, 0xA2945DB3, 0xB943F971, 0x8009F5F3, 0x844BAB95, 0x8C515033,
				0x9296AFF5, 0xA9288C65, 0xA0B1A807, 0xB725C529, 0xA36E8EC7, 0xA59B6A83, 0xB1173B23, 0x91F6787F,
				0x8F009B75, 0x93A815E7, 0xC465778F, 0x9425DC8D, 0xCA564247, 0xDF3909A1, 0xC788231F, 0x854066D1,
				0xAAA0CBBF, 0xF4E86F33, 0xD1D3B9E7, 0xE81D90D5, 0xFB9F0613, 0xCD3E83D3, 0xC3A1CBF5, 0xD4D8A629,
				0xB1A74627, 0x9DF00FC5, 0xC7559721, 0xAA19AAB7, 0xF0A31CA7, 0xBD355B25, 0xA3A55BE1, 0xF0855D59,
				0xE935C8D7, 0xBF8F0567, 0x93912007, 0xCE810209, 0x8E0CE38D, 0xA898701D, 0xE6B6789F, 0x901BFFFB,
				0xCA0A9FDB, 0xFC8F186F, 0xA8A4FFA5, 0xEA393429, 0xEF3AF87B, 0xB80947FD, 0xC2D190D3, 0xA8DBCCBF,
				0xF7A1B909, 0xA4CB2F61, 0xC5AD4B79, 0xF288FED7, 0xE45710E5, 0x8A2E6A69, 0xE69BEE77, 0xF0CE6ED1,
				0x95B94A41, 0xD2403F83, 0xD3A1919F, 0x81668DEB, 0xEBA70489, 0xD0CDB4FF, 0xD81FD1D3, 0xB302C987,
				0xABB672CD, 0x9E55CBF3, 0xCF5B331D, 0xA8FA9803, 0x8BD6AD6F, 0xD0ED94DB, 0xC3BCF1AD, 0xC30969E3,
				0x847FE7BB, 0xCB0959AB, 0x8CF7D80F, 0xFAEFB6C3, 0xD9EFDB5D, 0xA02B8A53, 0xCED41215, 0xDA322367,
				0x8C2A253F, 0x88663643, 0xB8580E4B, 0x83657DE7, 0xE4E04137, 0xF9E0C7DF, 0xA68C7791, 0xC17DC8F1,
				0xC9247ACF, 0xDC8DEE37, 0xA88A6439, 0x95E6BCF9, 0xDE0184B1, 0xE881C805, 0xCEA405C7, 0x9A3AB6F9,
				0xB520960B, 0xD83C14C5, 0xFF570117, 0x855FCDA5, 0xEB65580F, 0xB1A10705, 0xFE1B43AD, 0xDA0B0115,
				0xE2C5A9D9, 0xC9FB76BD, 0xDA6C84C9, 0xB76FD153, 0xF3A9039B, 0xA49668EF, 0xE09F978B, 0xF701704F,
				0xE39ECEF7, 0xEDD14F51, 0xB1E0228B, 0xE78D0427, 0x9438B3D9, 0xB5CE57BB, 0xABFBDEB9, 0x9CEC22C9,
				0x9BE73B1B, 0x897954FF, 0xC6E3D5B7, 0xE0D3DC53, 0xE79030AB, 0xA4E2AF8D, 0x86C337AD, 0xADCBDFA1,
				0x8E2ED2B3, 0xB3A06767, 0xC179176F, 0xE0503E4F, 0xD30A3B83, 0xDD8A7ED7, 0xB68E5DC9, 0xA00EC5B7,
				0xB57AD749, 0xA0148BD1, 0xEB8D7DB5, 0x8CE7A2FB, 0xA8D481A7, 0xF54EBE4F, 0xDFBF3899, 0x8F7507B9,
				0x8DAF8FB1, 0x83C514D9, 0xC5414787, 0xD5FA5B15, 0xD90AC247, 0x864C3A75, 0x828E004F, 0xC18F9447,
				0xF458E5D9, 0x950540CD, 0xF13D03B7, 0xABDF22BF, 0xEF226C59, 0xACA4EEE7, 0x9D9532F7, 0xDB65787F,
				0x86F7E439, 0xA3AA8F0D, 0xEFBF06E5, 0xCC448CC9, 0x95C66415, 0xACBE0555, 0xCC211003, 0xE72A6339,
				0x8699F4CD, 0xCAC0C9DD, 0xCA5B050D, 0xCA3D45BF, 0xE73DB38D, 0xAFA63E3F, 0xC94E3F59, 0xDAF09BD5,
				0xCFCBE891, 0xFDA3293B, 0xDB41FBB9, 0xE86CE16F, 0xA94D8587, 0xA6D2E6D1, 0xCA179FC9, 0xDC9D87BB,
				0xC14D4C3D, 0xF58C4C35, 0xB30ECEC3, 0xC4B12B3F, 0xE72A5A97, 0xF8CCB713, 0xF2406667, 0xE0FC83A3,
				0xCC8EAA37, 0x87668A63, 0xFC988415, 0xCC0B2619, 0xBE0EF94B, 0xC75DEE2F, 0xFBDF3ED3, 0xF176FD55,
				0xA8FFC28D, 0x83887061, 0xCD0A47AD, 0xB672ADC5, 0xFAFF47A5, 0xA85E7F21, 0xCAA1ED55, 0xE9E5B3B7,
				0x888A3D55, 0xCCFED55F, 0xA3F9555B, 0x93A04925, 0xC905253F, 0xAF7525FB, 0xC427E9A9, 0xA69E3A45,
				0x84C86EE7, 0xAB058D3B, 0xB87E35EB, 0xA03786ED, 0x9AC482DB, 0xB6815DDB, 0xC2E0B9F1,
			};


//		int[] GOLDEN_INTS = new int[MathTools.GOLDEN_LONGS.length];
//		for (int i = 0; i < GOLDEN_INTS.length; i++) {
//			GOLDEN_INTS[i] = (int)(MathTools.GOLDEN_LONGS[i] >>> 32) | 1;
//		}
		final Vector2[] spiral = generateVectorSpiral(LEN);
		final long THRESHOLD = (long) (Math.pow(LEN, 11.0 / 10.0));// (long)(Math.pow(LEN, 7.0/6.0));
//		IntLongOrderedMap problems = new IntLongOrderedMap(100);
		final int[] problems = {0};
		IntIntOrderedMap good = new IntIntOrderedMap(512);
		for (int x = 0; x < 512; x++) {
			good.put(GOOD[x], 0);
		}
//		int[] GOLDEN_INTS = good.keySet().toArray();
		int[] GOLDEN_INTS = GOOD;
		final int COUNT = GOLDEN_INTS.length;
		long[] minMax = new long[]{Long.MAX_VALUE, Long.MIN_VALUE, Long.MAX_VALUE, Long.MIN_VALUE};
		short[] chosen = new short[512];
		for (int a = 0; a < COUNT; a++) {
			final int g = GOLDEN_INTS[a];
			{
				final int finalA = a;
				ObjectSet set = new ObjectSet(51, 0.6f) {
					long collisionTotal = 0;
					int longestPileup = 0;
					int hm = 0xB7AD9447;//0xF1042721;// 0x9E3779B7;

					@Override
					protected int place(@NotNull Object item) {
//						final int h = BitConversion.imul(item.hashCode(), hm);
//						return (h ^ h << 16) >>> shift;
//						return BitConversion.imul(item.hashCode(), hm) & mask; // UNUSABLE FOR VECTORS
//						final int h = item.hashCode();
//						return BitConversion.imul(h ^ h >>> 16, hm) >>> shift;
						return BitConversion.imul(item.hashCode(), hm) >>> shift;
					}

					@Override
					protected void addResize(@NotNull Object key) {
						Object[] keyTable = this.keyTable;
						for (int i = place(key), p = 0; ; i = i + 1 & mask) {
							if (keyTable[i] == null) {
								keyTable[i] = key;
								return;
							} else {
								collisionTotal++;
								longestPileup = Math.max(longestPileup, ++p);
								good.put(g, longestPileup);
							}
						}
					}

					@Override
					protected void resize(int newSize) {
						int oldCapacity = keyTable.length;
						threshold = (int) (newSize * loadFactor);
						mask = newSize - 1;
						shift = BitConversion.countLeadingZeros(mask) + 32;

						int index = (hm ^ hm >>> 17 ^ shift) & 511;
						chosen[index]++;
						hashMultiplier = hm = GOOD[index];
						Object[] oldKeyTable = keyTable;

						keyTable = new Object[newSize];

						collisionTotal = 0;
						longestPileup = 0;

						if (size > 0) {
							for (int i = 0; i < oldCapacity; i++) {
								Object key = oldKeyTable[i];
								if (key != null) {
									addResize(key);
								}
							}
						}
						if (collisionTotal > THRESHOLD) {
//							System.out.printf("  WHOOPS!!!  Multiplier %08X on index %4d has %d collisions and %d pileup\n", hashMultiplier, finalA, collisionTotal, longestPileup);
							problems[0]++;
//							good.remove(g);
							throw new RuntimeException();
						}
					}

					@Override
					public void clear() {
						System.out.print(Base.BASE10.unsigned(finalA) + "/" + Base.BASE10.unsigned(COUNT) + ": Original 0x" + Base.BASE16.unsigned(g) + " on latest " + Base.BASE16.unsigned(hm));
						System.out.println(" gets total collisions: " + collisionTotal + ", PILEUP: " + longestPileup);
						minMax[0] = Math.min(minMax[0], collisionTotal);
						minMax[1] = Math.max(minMax[1], collisionTotal);
						minMax[2] = Math.min(minMax[2], longestPileup);
						minMax[3] = Math.max(minMax[3], longestPileup);
						super.clear();
					}

					@Override
					public void setHashMultiplier(int hashMultiplier) {
						this.hashMultiplier = hashMultiplier | 1;
						hm = this.hashMultiplier;
						resize(keyTable.length);
					}
				};
				set.setHashMultiplier(g);
				try {
					for (int i = 0, n = spiral.length; i < n; i++) {
						set.add(spiral[i]);
					}
				} catch (RuntimeException ignored) {
					System.out.println(g + " FAILURE");
					continue;
				}
				set.clear();
			}
		}
		System.out.println("This used a threshold of " + THRESHOLD);
		System.out.println("Indices used: ");
		for (int y = 0, idx = 0; y < 32; y++) {
			for (int x = 0; x < 16; x++) {
				System.out.print(Base.BASE16.unsigned(chosen[idx++]) + " ");
			}
			System.out.println();
		}
		good.sortByValue(IntComparators.NATURAL_COMPARATOR);

		System.out.println("\n\nint[] GOOD_MULTIPLIERS = new int[]{");
		for (int i = 0; i < Integer.highestOneBit(good.size()); i++) {
			System.out.print("0x" + Base.BASE16.unsigned(good.keyAt(i)) + "=0x" + Base.BASE16.unsigned(good.getAt(i)) + ", ");
			if ((i & 7) == 7)
				System.out.println();
		}
		System.out.println("};\n");
		System.out.println(problems[0] + " problem multipliers in total, " + (COUNT - problems[0]) + " likely good multipliers in total.");
		System.out.println("Lowest collisions : " + minMax[0]);
		System.out.println("Highest collisions: " + minMax[1]);
		System.out.println("Lowest pileup     : " + minMax[2]);
		System.out.println("Highest pileup    : " + minMax[3]);
	}

}
